
On_demond_traffic_light.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000e9e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000002  00800060  00800060  00000f12  2**0
                  ALLOC
  2 .stab         00001ca4  00000000  00000000  00000f14  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000e63  00000000  00000000  00002bb8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 ec 04 	jmp	0x9d8	; 0x9d8 <__vector_1>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__vector_11>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a2 36       	cpi	r26, 0x62	; 98
  6c:	b1 07       	cpc	r27, r17
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 44 07 	call	0xe88	; 0xe88 <main>
  74:	0c 94 4d 07 	jmp	0xe9a	; 0xe9a <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <__vector_11>:
 */
#include "timer.h"

uint8 gtick = 0 ;
ISR(TIMER0_OVF_vect)
{
  7c:	1f 92       	push	r1
  7e:	0f 92       	push	r0
  80:	0f b6       	in	r0, 0x3f	; 63
  82:	0f 92       	push	r0
  84:	11 24       	eor	r1, r1
  86:	8f 93       	push	r24
  88:	df 93       	push	r29
  8a:	cf 93       	push	r28
  8c:	cd b7       	in	r28, 0x3d	; 61
  8e:	de b7       	in	r29, 0x3e	; 62
	gtick++;
  90:	80 91 60 00 	lds	r24, 0x0060
  94:	8f 5f       	subi	r24, 0xFF	; 255
  96:	80 93 60 00 	sts	0x0060, r24

}
  9a:	cf 91       	pop	r28
  9c:	df 91       	pop	r29
  9e:	8f 91       	pop	r24
  a0:	0f 90       	pop	r0
  a2:	0f be       	out	0x3f, r0	; 63
  a4:	0f 90       	pop	r0
  a6:	1f 90       	pop	r1
  a8:	18 95       	reti

000000aa <TIMER0_STOP>:

void TIMER0_STOP (){
  aa:	df 93       	push	r29
  ac:	cf 93       	push	r28
  ae:	cd b7       	in	r28, 0x3d	; 61
  b0:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(TCCR0 , CS00) ;
  b2:	a3 e5       	ldi	r26, 0x53	; 83
  b4:	b0 e0       	ldi	r27, 0x00	; 0
  b6:	e3 e5       	ldi	r30, 0x53	; 83
  b8:	f0 e0       	ldi	r31, 0x00	; 0
  ba:	80 81       	ld	r24, Z
  bc:	8e 7f       	andi	r24, 0xFE	; 254
  be:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR0 , CS01) ;
  c0:	a3 e5       	ldi	r26, 0x53	; 83
  c2:	b0 e0       	ldi	r27, 0x00	; 0
  c4:	e3 e5       	ldi	r30, 0x53	; 83
  c6:	f0 e0       	ldi	r31, 0x00	; 0
  c8:	80 81       	ld	r24, Z
  ca:	8d 7f       	andi	r24, 0xFD	; 253
  cc:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR0 , CS02) ;
  ce:	a3 e5       	ldi	r26, 0x53	; 83
  d0:	b0 e0       	ldi	r27, 0x00	; 0
  d2:	e3 e5       	ldi	r30, 0x53	; 83
  d4:	f0 e0       	ldi	r31, 0x00	; 0
  d6:	80 81       	ld	r24, Z
  d8:	8b 7f       	andi	r24, 0xFB	; 251
  da:	8c 93       	st	X, r24
}
  dc:	cf 91       	pop	r28
  de:	df 91       	pop	r29
  e0:	08 95       	ret

000000e2 <TIMER0_INIT>:
void TIMER0_INIT (){
  e2:	df 93       	push	r29
  e4:	cf 93       	push	r28
  e6:	cd b7       	in	r28, 0x3d	; 61
  e8:	de b7       	in	r29, 0x3e	; 62

	TCNT0 = 0 ;  // INITIAL VALUE = 0
  ea:	e2 e5       	ldi	r30, 0x52	; 82
  ec:	f0 e0       	ldi	r31, 0x00	; 0
  ee:	10 82       	st	Z, r1
	// NON - PWM MODE
    TIMSK |= (1<<TOIE0); // Enable Timer0 Overflow Interrupt
  f0:	a9 e5       	ldi	r26, 0x59	; 89
  f2:	b0 e0       	ldi	r27, 0x00	; 0
  f4:	e9 e5       	ldi	r30, 0x59	; 89
  f6:	f0 e0       	ldi	r31, 0x00	; 0
  f8:	80 81       	ld	r24, Z
  fa:	81 60       	ori	r24, 0x01	; 1
  fc:	8c 93       	st	X, r24
	TCCR0 = (1<<FOC0) | (1<<CS02) | (1<<CS00);
  fe:	e3 e5       	ldi	r30, 0x53	; 83
 100:	f0 e0       	ldi	r31, 0x00	; 0
 102:	85 e8       	ldi	r24, 0x85	; 133
 104:	80 83       	st	Z, r24
	// ENABLE OVERFLOW INTERRUPT
	sei() ;
 106:	78 94       	sei
}
 108:	cf 91       	pop	r28
 10a:	df 91       	pop	r29
 10c:	08 95       	ret

0000010e <TIMER1_STOP>:
void TIMER1_STOP (){
 10e:	df 93       	push	r29
 110:	cf 93       	push	r28
 112:	cd b7       	in	r28, 0x3d	; 61
 114:	de b7       	in	r29, 0x3e	; 62

	CLEAR_BIT (TCCR1B , CS12) ;
 116:	ae e4       	ldi	r26, 0x4E	; 78
 118:	b0 e0       	ldi	r27, 0x00	; 0
 11a:	ee e4       	ldi	r30, 0x4E	; 78
 11c:	f0 e0       	ldi	r31, 0x00	; 0
 11e:	80 81       	ld	r24, Z
 120:	8b 7f       	andi	r24, 0xFB	; 251
 122:	8c 93       	st	X, r24
	CLEAR_BIT (TCCR1B , CS11) ;
 124:	ae e4       	ldi	r26, 0x4E	; 78
 126:	b0 e0       	ldi	r27, 0x00	; 0
 128:	ee e4       	ldi	r30, 0x4E	; 78
 12a:	f0 e0       	ldi	r31, 0x00	; 0
 12c:	80 81       	ld	r24, Z
 12e:	8d 7f       	andi	r24, 0xFD	; 253
 130:	8c 93       	st	X, r24
	CLEAR_BIT (TCCR1B , CS10) ;
 132:	ae e4       	ldi	r26, 0x4E	; 78
 134:	b0 e0       	ldi	r27, 0x00	; 0
 136:	ee e4       	ldi	r30, 0x4E	; 78
 138:	f0 e0       	ldi	r31, 0x00	; 0
 13a:	80 81       	ld	r24, Z
 13c:	8e 7f       	andi	r24, 0xFE	; 254
 13e:	8c 93       	st	X, r24

}
 140:	cf 91       	pop	r28
 142:	df 91       	pop	r29
 144:	08 95       	ret

00000146 <Timer1_Delay_FIVE_sec>:
void Timer1_Delay_FIVE_sec() {
 146:	df 93       	push	r29
 148:	cf 93       	push	r28
 14a:	cd b7       	in	r28, 0x3d	; 61
 14c:	de b7       	in	r29, 0x3e	; 62
	TCNT1 = 0xB3B4 ;  // INITIAL VALUE = 65536-19532 = 46004
 14e:	ec e4       	ldi	r30, 0x4C	; 76
 150:	f0 e0       	ldi	r31, 0x00	; 0
 152:	84 eb       	ldi	r24, 0xB4	; 180
 154:	93 eb       	ldi	r25, 0xB3	; 179
 156:	91 83       	std	Z+1, r25	; 0x01
 158:	80 83       	st	Z, r24
	TCCR1A = 0 ;
 15a:	ef e4       	ldi	r30, 0x4F	; 79
 15c:	f0 e0       	ldi	r31, 0x00	; 0
 15e:	10 82       	st	Z, r1
	TCCR1B = 0x04 ;
 160:	ee e4       	ldi	r30, 0x4E	; 78
 162:	f0 e0       	ldi	r31, 0x00	; 0
 164:	84 e0       	ldi	r24, 0x04	; 4
 166:	80 83       	st	Z, r24
    //SET_BIT(TCCR1B , CS12) ;
    while ((TIFR&(1<<TOV1))==0);
 168:	e8 e5       	ldi	r30, 0x58	; 88
 16a:	f0 e0       	ldi	r31, 0x00	; 0
 16c:	80 81       	ld	r24, Z
 16e:	88 2f       	mov	r24, r24
 170:	90 e0       	ldi	r25, 0x00	; 0
 172:	84 70       	andi	r24, 0x04	; 4
 174:	90 70       	andi	r25, 0x00	; 0
 176:	00 97       	sbiw	r24, 0x00	; 0
 178:	b9 f3       	breq	.-18     	; 0x168 <Timer1_Delay_FIVE_sec+0x22>
    TCCR1B = 0 ;
 17a:	ee e4       	ldi	r30, 0x4E	; 78
 17c:	f0 e0       	ldi	r31, 0x00	; 0
 17e:	10 82       	st	Z, r1
    SET_BIT(TIFR , TOV1) ;
 180:	a8 e5       	ldi	r26, 0x58	; 88
 182:	b0 e0       	ldi	r27, 0x00	; 0
 184:	e8 e5       	ldi	r30, 0x58	; 88
 186:	f0 e0       	ldi	r31, 0x00	; 0
 188:	80 81       	ld	r24, Z
 18a:	84 60       	ori	r24, 0x04	; 4
 18c:	8c 93       	st	X, r24
}
 18e:	cf 91       	pop	r28
 190:	df 91       	pop	r29
 192:	08 95       	ret

00000194 <Timer1_Delay_One_sec>:
void Timer1_Delay_One_sec() {
 194:	df 93       	push	r29
 196:	cf 93       	push	r28
 198:	cd b7       	in	r28, 0x3d	; 61
 19a:	de b7       	in	r29, 0x3e	; 62
	TCNT1 = 0xF0B7 ;  // INITIAL VALUE = 65536-19532 = 46004
 19c:	ec e4       	ldi	r30, 0x4C	; 76
 19e:	f0 e0       	ldi	r31, 0x00	; 0
 1a0:	87 eb       	ldi	r24, 0xB7	; 183
 1a2:	90 ef       	ldi	r25, 0xF0	; 240
 1a4:	91 83       	std	Z+1, r25	; 0x01
 1a6:	80 83       	st	Z, r24
		TCCR1A = 0 ;
 1a8:	ef e4       	ldi	r30, 0x4F	; 79
 1aa:	f0 e0       	ldi	r31, 0x00	; 0
 1ac:	10 82       	st	Z, r1
		TCCR1B = 0x04 ;
 1ae:	ee e4       	ldi	r30, 0x4E	; 78
 1b0:	f0 e0       	ldi	r31, 0x00	; 0
 1b2:	84 e0       	ldi	r24, 0x04	; 4
 1b4:	80 83       	st	Z, r24
	    //SET_BIT(TCCR1B , CS12) ;
	    while ((TIFR&(1<<TOV1))==0);
 1b6:	e8 e5       	ldi	r30, 0x58	; 88
 1b8:	f0 e0       	ldi	r31, 0x00	; 0
 1ba:	80 81       	ld	r24, Z
 1bc:	88 2f       	mov	r24, r24
 1be:	90 e0       	ldi	r25, 0x00	; 0
 1c0:	84 70       	andi	r24, 0x04	; 4
 1c2:	90 70       	andi	r25, 0x00	; 0
 1c4:	00 97       	sbiw	r24, 0x00	; 0
 1c6:	b9 f3       	breq	.-18     	; 0x1b6 <Timer1_Delay_One_sec+0x22>
	    TCCR1B = 0 ;
 1c8:	ee e4       	ldi	r30, 0x4E	; 78
 1ca:	f0 e0       	ldi	r31, 0x00	; 0
 1cc:	10 82       	st	Z, r1
	    SET_BIT(TIFR , TOV1) ;
 1ce:	a8 e5       	ldi	r26, 0x58	; 88
 1d0:	b0 e0       	ldi	r27, 0x00	; 0
 1d2:	e8 e5       	ldi	r30, 0x58	; 88
 1d4:	f0 e0       	ldi	r31, 0x00	; 0
 1d6:	80 81       	ld	r24, Z
 1d8:	84 60       	ori	r24, 0x04	; 4
 1da:	8c 93       	st	X, r24

}
 1dc:	cf 91       	pop	r28
 1de:	df 91       	pop	r29
 1e0:	08 95       	ret

000001e2 <PIN_DIRECTION>:
 * Created: 9/6/2022 12:29:12 AM
 *  Author: Abdelrahman M Leithy
 */
#include "dio.h"

void PIN_DIRECTION (uint8 pin_num , uint8 port_num  , DIO_PIN_DIRECTION direction) {
 1e2:	df 93       	push	r29
 1e4:	cf 93       	push	r28
 1e6:	00 d0       	rcall	.+0      	; 0x1e8 <PIN_DIRECTION+0x6>
 1e8:	00 d0       	rcall	.+0      	; 0x1ea <PIN_DIRECTION+0x8>
 1ea:	0f 92       	push	r0
 1ec:	cd b7       	in	r28, 0x3d	; 61
 1ee:	de b7       	in	r29, 0x3e	; 62
 1f0:	89 83       	std	Y+1, r24	; 0x01
 1f2:	6a 83       	std	Y+2, r22	; 0x02
 1f4:	4b 83       	std	Y+3, r20	; 0x03
	if((pin_num >= PIN_NUM)||(port_num >= PORT_NUM)) {
 1f6:	89 81       	ldd	r24, Y+1	; 0x01
 1f8:	88 30       	cpi	r24, 0x08	; 8
 1fa:	08 f0       	brcs	.+2      	; 0x1fe <PIN_DIRECTION+0x1c>
 1fc:	d5 c0       	rjmp	.+426    	; 0x3a8 <PIN_DIRECTION+0x1c6>
 1fe:	8a 81       	ldd	r24, Y+2	; 0x02
 200:	84 30       	cpi	r24, 0x04	; 4
 202:	08 f0       	brcs	.+2      	; 0x206 <PIN_DIRECTION+0x24>
 204:	d1 c0       	rjmp	.+418    	; 0x3a8 <PIN_DIRECTION+0x1c6>
		// DO NOTHING
	}
	else {
	switch (port_num) {
 206:	8a 81       	ldd	r24, Y+2	; 0x02
 208:	28 2f       	mov	r18, r24
 20a:	30 e0       	ldi	r19, 0x00	; 0
 20c:	3d 83       	std	Y+5, r19	; 0x05
 20e:	2c 83       	std	Y+4, r18	; 0x04
 210:	8c 81       	ldd	r24, Y+4	; 0x04
 212:	9d 81       	ldd	r25, Y+5	; 0x05
 214:	81 30       	cpi	r24, 0x01	; 1
 216:	91 05       	cpc	r25, r1
 218:	09 f4       	brne	.+2      	; 0x21c <PIN_DIRECTION+0x3a>
 21a:	43 c0       	rjmp	.+134    	; 0x2a2 <PIN_DIRECTION+0xc0>
 21c:	2c 81       	ldd	r18, Y+4	; 0x04
 21e:	3d 81       	ldd	r19, Y+5	; 0x05
 220:	22 30       	cpi	r18, 0x02	; 2
 222:	31 05       	cpc	r19, r1
 224:	2c f4       	brge	.+10     	; 0x230 <PIN_DIRECTION+0x4e>
 226:	8c 81       	ldd	r24, Y+4	; 0x04
 228:	9d 81       	ldd	r25, Y+5	; 0x05
 22a:	00 97       	sbiw	r24, 0x00	; 0
 22c:	71 f0       	breq	.+28     	; 0x24a <PIN_DIRECTION+0x68>
 22e:	bc c0       	rjmp	.+376    	; 0x3a8 <PIN_DIRECTION+0x1c6>
 230:	2c 81       	ldd	r18, Y+4	; 0x04
 232:	3d 81       	ldd	r19, Y+5	; 0x05
 234:	22 30       	cpi	r18, 0x02	; 2
 236:	31 05       	cpc	r19, r1
 238:	09 f4       	brne	.+2      	; 0x23c <PIN_DIRECTION+0x5a>
 23a:	5f c0       	rjmp	.+190    	; 0x2fa <PIN_DIRECTION+0x118>
 23c:	8c 81       	ldd	r24, Y+4	; 0x04
 23e:	9d 81       	ldd	r25, Y+5	; 0x05
 240:	83 30       	cpi	r24, 0x03	; 3
 242:	91 05       	cpc	r25, r1
 244:	09 f4       	brne	.+2      	; 0x248 <PIN_DIRECTION+0x66>
 246:	85 c0       	rjmp	.+266    	; 0x352 <PIN_DIRECTION+0x170>
 248:	af c0       	rjmp	.+350    	; 0x3a8 <PIN_DIRECTION+0x1c6>
	case PORTA_ID  :
	if(direction == PIN_INPUT) {
 24a:	8b 81       	ldd	r24, Y+3	; 0x03
 24c:	88 23       	and	r24, r24
 24e:	a9 f4       	brne	.+42     	; 0x27a <PIN_DIRECTION+0x98>
    CLEAR_BIT(DDRA , pin_num) ;
 250:	aa e3       	ldi	r26, 0x3A	; 58
 252:	b0 e0       	ldi	r27, 0x00	; 0
 254:	ea e3       	ldi	r30, 0x3A	; 58
 256:	f0 e0       	ldi	r31, 0x00	; 0
 258:	80 81       	ld	r24, Z
 25a:	48 2f       	mov	r20, r24
 25c:	89 81       	ldd	r24, Y+1	; 0x01
 25e:	28 2f       	mov	r18, r24
 260:	30 e0       	ldi	r19, 0x00	; 0
 262:	81 e0       	ldi	r24, 0x01	; 1
 264:	90 e0       	ldi	r25, 0x00	; 0
 266:	02 2e       	mov	r0, r18
 268:	02 c0       	rjmp	.+4      	; 0x26e <PIN_DIRECTION+0x8c>
 26a:	88 0f       	add	r24, r24
 26c:	99 1f       	adc	r25, r25
 26e:	0a 94       	dec	r0
 270:	e2 f7       	brpl	.-8      	; 0x26a <PIN_DIRECTION+0x88>
 272:	80 95       	com	r24
 274:	84 23       	and	r24, r20
 276:	8c 93       	st	X, r24
 278:	97 c0       	rjmp	.+302    	; 0x3a8 <PIN_DIRECTION+0x1c6>

	}
	else {
		SET_BIT(DDRA , pin_num) ;
 27a:	aa e3       	ldi	r26, 0x3A	; 58
 27c:	b0 e0       	ldi	r27, 0x00	; 0
 27e:	ea e3       	ldi	r30, 0x3A	; 58
 280:	f0 e0       	ldi	r31, 0x00	; 0
 282:	80 81       	ld	r24, Z
 284:	48 2f       	mov	r20, r24
 286:	89 81       	ldd	r24, Y+1	; 0x01
 288:	28 2f       	mov	r18, r24
 28a:	30 e0       	ldi	r19, 0x00	; 0
 28c:	81 e0       	ldi	r24, 0x01	; 1
 28e:	90 e0       	ldi	r25, 0x00	; 0
 290:	02 2e       	mov	r0, r18
 292:	02 c0       	rjmp	.+4      	; 0x298 <PIN_DIRECTION+0xb6>
 294:	88 0f       	add	r24, r24
 296:	99 1f       	adc	r25, r25
 298:	0a 94       	dec	r0
 29a:	e2 f7       	brpl	.-8      	; 0x294 <PIN_DIRECTION+0xb2>
 29c:	84 2b       	or	r24, r20
 29e:	8c 93       	st	X, r24
 2a0:	83 c0       	rjmp	.+262    	; 0x3a8 <PIN_DIRECTION+0x1c6>

	}
	break ;
	case PORTB_ID :
	if(direction == PIN_INPUT) {
 2a2:	8b 81       	ldd	r24, Y+3	; 0x03
 2a4:	88 23       	and	r24, r24
 2a6:	a9 f4       	brne	.+42     	; 0x2d2 <PIN_DIRECTION+0xf0>
		CLEAR_BIT (DDRB , pin_num) ;
 2a8:	a7 e3       	ldi	r26, 0x37	; 55
 2aa:	b0 e0       	ldi	r27, 0x00	; 0
 2ac:	e7 e3       	ldi	r30, 0x37	; 55
 2ae:	f0 e0       	ldi	r31, 0x00	; 0
 2b0:	80 81       	ld	r24, Z
 2b2:	48 2f       	mov	r20, r24
 2b4:	89 81       	ldd	r24, Y+1	; 0x01
 2b6:	28 2f       	mov	r18, r24
 2b8:	30 e0       	ldi	r19, 0x00	; 0
 2ba:	81 e0       	ldi	r24, 0x01	; 1
 2bc:	90 e0       	ldi	r25, 0x00	; 0
 2be:	02 2e       	mov	r0, r18
 2c0:	02 c0       	rjmp	.+4      	; 0x2c6 <PIN_DIRECTION+0xe4>
 2c2:	88 0f       	add	r24, r24
 2c4:	99 1f       	adc	r25, r25
 2c6:	0a 94       	dec	r0
 2c8:	e2 f7       	brpl	.-8      	; 0x2c2 <PIN_DIRECTION+0xe0>
 2ca:	80 95       	com	r24
 2cc:	84 23       	and	r24, r20
 2ce:	8c 93       	st	X, r24
 2d0:	6b c0       	rjmp	.+214    	; 0x3a8 <PIN_DIRECTION+0x1c6>

	}
	else {
		SET_BIT(DDRB , pin_num) ;
 2d2:	a7 e3       	ldi	r26, 0x37	; 55
 2d4:	b0 e0       	ldi	r27, 0x00	; 0
 2d6:	e7 e3       	ldi	r30, 0x37	; 55
 2d8:	f0 e0       	ldi	r31, 0x00	; 0
 2da:	80 81       	ld	r24, Z
 2dc:	48 2f       	mov	r20, r24
 2de:	89 81       	ldd	r24, Y+1	; 0x01
 2e0:	28 2f       	mov	r18, r24
 2e2:	30 e0       	ldi	r19, 0x00	; 0
 2e4:	81 e0       	ldi	r24, 0x01	; 1
 2e6:	90 e0       	ldi	r25, 0x00	; 0
 2e8:	02 2e       	mov	r0, r18
 2ea:	02 c0       	rjmp	.+4      	; 0x2f0 <PIN_DIRECTION+0x10e>
 2ec:	88 0f       	add	r24, r24
 2ee:	99 1f       	adc	r25, r25
 2f0:	0a 94       	dec	r0
 2f2:	e2 f7       	brpl	.-8      	; 0x2ec <PIN_DIRECTION+0x10a>
 2f4:	84 2b       	or	r24, r20
 2f6:	8c 93       	st	X, r24
 2f8:	57 c0       	rjmp	.+174    	; 0x3a8 <PIN_DIRECTION+0x1c6>

	}
	break;
	case PORTC_ID :
	if(direction == PIN_INPUT) {
 2fa:	8b 81       	ldd	r24, Y+3	; 0x03
 2fc:	88 23       	and	r24, r24
 2fe:	a9 f4       	brne	.+42     	; 0x32a <PIN_DIRECTION+0x148>
		CLEAR_BIT (DDRC , pin_num) ;
 300:	a4 e3       	ldi	r26, 0x34	; 52
 302:	b0 e0       	ldi	r27, 0x00	; 0
 304:	e4 e3       	ldi	r30, 0x34	; 52
 306:	f0 e0       	ldi	r31, 0x00	; 0
 308:	80 81       	ld	r24, Z
 30a:	48 2f       	mov	r20, r24
 30c:	89 81       	ldd	r24, Y+1	; 0x01
 30e:	28 2f       	mov	r18, r24
 310:	30 e0       	ldi	r19, 0x00	; 0
 312:	81 e0       	ldi	r24, 0x01	; 1
 314:	90 e0       	ldi	r25, 0x00	; 0
 316:	02 2e       	mov	r0, r18
 318:	02 c0       	rjmp	.+4      	; 0x31e <PIN_DIRECTION+0x13c>
 31a:	88 0f       	add	r24, r24
 31c:	99 1f       	adc	r25, r25
 31e:	0a 94       	dec	r0
 320:	e2 f7       	brpl	.-8      	; 0x31a <PIN_DIRECTION+0x138>
 322:	80 95       	com	r24
 324:	84 23       	and	r24, r20
 326:	8c 93       	st	X, r24
 328:	3f c0       	rjmp	.+126    	; 0x3a8 <PIN_DIRECTION+0x1c6>

	}
	else {
		SET_BIT(DDRC , pin_num) ;
 32a:	a4 e3       	ldi	r26, 0x34	; 52
 32c:	b0 e0       	ldi	r27, 0x00	; 0
 32e:	e4 e3       	ldi	r30, 0x34	; 52
 330:	f0 e0       	ldi	r31, 0x00	; 0
 332:	80 81       	ld	r24, Z
 334:	48 2f       	mov	r20, r24
 336:	89 81       	ldd	r24, Y+1	; 0x01
 338:	28 2f       	mov	r18, r24
 33a:	30 e0       	ldi	r19, 0x00	; 0
 33c:	81 e0       	ldi	r24, 0x01	; 1
 33e:	90 e0       	ldi	r25, 0x00	; 0
 340:	02 2e       	mov	r0, r18
 342:	02 c0       	rjmp	.+4      	; 0x348 <PIN_DIRECTION+0x166>
 344:	88 0f       	add	r24, r24
 346:	99 1f       	adc	r25, r25
 348:	0a 94       	dec	r0
 34a:	e2 f7       	brpl	.-8      	; 0x344 <PIN_DIRECTION+0x162>
 34c:	84 2b       	or	r24, r20
 34e:	8c 93       	st	X, r24
 350:	2b c0       	rjmp	.+86     	; 0x3a8 <PIN_DIRECTION+0x1c6>

	}
	break;
	case PORTD_ID :
	if(direction == PIN_INPUT) {
 352:	8b 81       	ldd	r24, Y+3	; 0x03
 354:	88 23       	and	r24, r24
 356:	a9 f4       	brne	.+42     	; 0x382 <PIN_DIRECTION+0x1a0>
		CLEAR_BIT (DDRD , pin_num) ;
 358:	a1 e3       	ldi	r26, 0x31	; 49
 35a:	b0 e0       	ldi	r27, 0x00	; 0
 35c:	e1 e3       	ldi	r30, 0x31	; 49
 35e:	f0 e0       	ldi	r31, 0x00	; 0
 360:	80 81       	ld	r24, Z
 362:	48 2f       	mov	r20, r24
 364:	89 81       	ldd	r24, Y+1	; 0x01
 366:	28 2f       	mov	r18, r24
 368:	30 e0       	ldi	r19, 0x00	; 0
 36a:	81 e0       	ldi	r24, 0x01	; 1
 36c:	90 e0       	ldi	r25, 0x00	; 0
 36e:	02 2e       	mov	r0, r18
 370:	02 c0       	rjmp	.+4      	; 0x376 <PIN_DIRECTION+0x194>
 372:	88 0f       	add	r24, r24
 374:	99 1f       	adc	r25, r25
 376:	0a 94       	dec	r0
 378:	e2 f7       	brpl	.-8      	; 0x372 <PIN_DIRECTION+0x190>
 37a:	80 95       	com	r24
 37c:	84 23       	and	r24, r20
 37e:	8c 93       	st	X, r24
 380:	13 c0       	rjmp	.+38     	; 0x3a8 <PIN_DIRECTION+0x1c6>

	}
	else {
		SET_BIT(DDRD , pin_num) ;
 382:	a1 e3       	ldi	r26, 0x31	; 49
 384:	b0 e0       	ldi	r27, 0x00	; 0
 386:	e1 e3       	ldi	r30, 0x31	; 49
 388:	f0 e0       	ldi	r31, 0x00	; 0
 38a:	80 81       	ld	r24, Z
 38c:	48 2f       	mov	r20, r24
 38e:	89 81       	ldd	r24, Y+1	; 0x01
 390:	28 2f       	mov	r18, r24
 392:	30 e0       	ldi	r19, 0x00	; 0
 394:	81 e0       	ldi	r24, 0x01	; 1
 396:	90 e0       	ldi	r25, 0x00	; 0
 398:	02 2e       	mov	r0, r18
 39a:	02 c0       	rjmp	.+4      	; 0x3a0 <PIN_DIRECTION+0x1be>
 39c:	88 0f       	add	r24, r24
 39e:	99 1f       	adc	r25, r25
 3a0:	0a 94       	dec	r0
 3a2:	e2 f7       	brpl	.-8      	; 0x39c <PIN_DIRECTION+0x1ba>
 3a4:	84 2b       	or	r24, r20
 3a6:	8c 93       	st	X, r24


	}
}

}
 3a8:	0f 90       	pop	r0
 3aa:	0f 90       	pop	r0
 3ac:	0f 90       	pop	r0
 3ae:	0f 90       	pop	r0
 3b0:	0f 90       	pop	r0
 3b2:	cf 91       	pop	r28
 3b4:	df 91       	pop	r29
 3b6:	08 95       	ret

000003b8 <WRITE_PIN>:
void WRITE_PIN (uint8 pin_num , uint8 port_num , uint8 value )  {
 3b8:	df 93       	push	r29
 3ba:	cf 93       	push	r28
 3bc:	00 d0       	rcall	.+0      	; 0x3be <WRITE_PIN+0x6>
 3be:	00 d0       	rcall	.+0      	; 0x3c0 <WRITE_PIN+0x8>
 3c0:	0f 92       	push	r0
 3c2:	cd b7       	in	r28, 0x3d	; 61
 3c4:	de b7       	in	r29, 0x3e	; 62
 3c6:	89 83       	std	Y+1, r24	; 0x01
 3c8:	6a 83       	std	Y+2, r22	; 0x02
 3ca:	4b 83       	std	Y+3, r20	; 0x03
	if((pin_num >= PIN_NUM)||(port_num >= PORT_NUM)) {
 3cc:	89 81       	ldd	r24, Y+1	; 0x01
 3ce:	88 30       	cpi	r24, 0x08	; 8
 3d0:	08 f0       	brcs	.+2      	; 0x3d4 <WRITE_PIN+0x1c>
 3d2:	d5 c0       	rjmp	.+426    	; 0x57e <WRITE_PIN+0x1c6>
 3d4:	8a 81       	ldd	r24, Y+2	; 0x02
 3d6:	84 30       	cpi	r24, 0x04	; 4
 3d8:	08 f0       	brcs	.+2      	; 0x3dc <WRITE_PIN+0x24>
 3da:	d1 c0       	rjmp	.+418    	; 0x57e <WRITE_PIN+0x1c6>
		// DO NOTHING
	}
	else {
switch (port_num) {
 3dc:	8a 81       	ldd	r24, Y+2	; 0x02
 3de:	28 2f       	mov	r18, r24
 3e0:	30 e0       	ldi	r19, 0x00	; 0
 3e2:	3d 83       	std	Y+5, r19	; 0x05
 3e4:	2c 83       	std	Y+4, r18	; 0x04
 3e6:	8c 81       	ldd	r24, Y+4	; 0x04
 3e8:	9d 81       	ldd	r25, Y+5	; 0x05
 3ea:	81 30       	cpi	r24, 0x01	; 1
 3ec:	91 05       	cpc	r25, r1
 3ee:	09 f4       	brne	.+2      	; 0x3f2 <WRITE_PIN+0x3a>
 3f0:	43 c0       	rjmp	.+134    	; 0x478 <WRITE_PIN+0xc0>
 3f2:	2c 81       	ldd	r18, Y+4	; 0x04
 3f4:	3d 81       	ldd	r19, Y+5	; 0x05
 3f6:	22 30       	cpi	r18, 0x02	; 2
 3f8:	31 05       	cpc	r19, r1
 3fa:	2c f4       	brge	.+10     	; 0x406 <WRITE_PIN+0x4e>
 3fc:	8c 81       	ldd	r24, Y+4	; 0x04
 3fe:	9d 81       	ldd	r25, Y+5	; 0x05
 400:	00 97       	sbiw	r24, 0x00	; 0
 402:	71 f0       	breq	.+28     	; 0x420 <WRITE_PIN+0x68>
 404:	bc c0       	rjmp	.+376    	; 0x57e <WRITE_PIN+0x1c6>
 406:	2c 81       	ldd	r18, Y+4	; 0x04
 408:	3d 81       	ldd	r19, Y+5	; 0x05
 40a:	22 30       	cpi	r18, 0x02	; 2
 40c:	31 05       	cpc	r19, r1
 40e:	09 f4       	brne	.+2      	; 0x412 <WRITE_PIN+0x5a>
 410:	5f c0       	rjmp	.+190    	; 0x4d0 <WRITE_PIN+0x118>
 412:	8c 81       	ldd	r24, Y+4	; 0x04
 414:	9d 81       	ldd	r25, Y+5	; 0x05
 416:	83 30       	cpi	r24, 0x03	; 3
 418:	91 05       	cpc	r25, r1
 41a:	09 f4       	brne	.+2      	; 0x41e <WRITE_PIN+0x66>
 41c:	85 c0       	rjmp	.+266    	; 0x528 <WRITE_PIN+0x170>
 41e:	af c0       	rjmp	.+350    	; 0x57e <WRITE_PIN+0x1c6>
	case PORTA_ID  :
	if(value == LOGIC_LOW) {
 420:	8b 81       	ldd	r24, Y+3	; 0x03
 422:	88 23       	and	r24, r24
 424:	a9 f4       	brne	.+42     	; 0x450 <WRITE_PIN+0x98>
		CLEAR_BIT (PORTA , pin_num) ;
 426:	ab e3       	ldi	r26, 0x3B	; 59
 428:	b0 e0       	ldi	r27, 0x00	; 0
 42a:	eb e3       	ldi	r30, 0x3B	; 59
 42c:	f0 e0       	ldi	r31, 0x00	; 0
 42e:	80 81       	ld	r24, Z
 430:	48 2f       	mov	r20, r24
 432:	89 81       	ldd	r24, Y+1	; 0x01
 434:	28 2f       	mov	r18, r24
 436:	30 e0       	ldi	r19, 0x00	; 0
 438:	81 e0       	ldi	r24, 0x01	; 1
 43a:	90 e0       	ldi	r25, 0x00	; 0
 43c:	02 2e       	mov	r0, r18
 43e:	02 c0       	rjmp	.+4      	; 0x444 <WRITE_PIN+0x8c>
 440:	88 0f       	add	r24, r24
 442:	99 1f       	adc	r25, r25
 444:	0a 94       	dec	r0
 446:	e2 f7       	brpl	.-8      	; 0x440 <WRITE_PIN+0x88>
 448:	80 95       	com	r24
 44a:	84 23       	and	r24, r20
 44c:	8c 93       	st	X, r24
 44e:	97 c0       	rjmp	.+302    	; 0x57e <WRITE_PIN+0x1c6>

	}
	else {
		SET_BIT(PORTA  , pin_num) ;
 450:	ab e3       	ldi	r26, 0x3B	; 59
 452:	b0 e0       	ldi	r27, 0x00	; 0
 454:	eb e3       	ldi	r30, 0x3B	; 59
 456:	f0 e0       	ldi	r31, 0x00	; 0
 458:	80 81       	ld	r24, Z
 45a:	48 2f       	mov	r20, r24
 45c:	89 81       	ldd	r24, Y+1	; 0x01
 45e:	28 2f       	mov	r18, r24
 460:	30 e0       	ldi	r19, 0x00	; 0
 462:	81 e0       	ldi	r24, 0x01	; 1
 464:	90 e0       	ldi	r25, 0x00	; 0
 466:	02 2e       	mov	r0, r18
 468:	02 c0       	rjmp	.+4      	; 0x46e <WRITE_PIN+0xb6>
 46a:	88 0f       	add	r24, r24
 46c:	99 1f       	adc	r25, r25
 46e:	0a 94       	dec	r0
 470:	e2 f7       	brpl	.-8      	; 0x46a <WRITE_PIN+0xb2>
 472:	84 2b       	or	r24, r20
 474:	8c 93       	st	X, r24
 476:	83 c0       	rjmp	.+262    	; 0x57e <WRITE_PIN+0x1c6>

	}
	break ;
	case PORTB_ID :
		if(value == LOGIC_LOW) {
 478:	8b 81       	ldd	r24, Y+3	; 0x03
 47a:	88 23       	and	r24, r24
 47c:	a9 f4       	brne	.+42     	; 0x4a8 <WRITE_PIN+0xf0>
			CLEAR_BIT (PORTB , pin_num) ;
 47e:	a8 e3       	ldi	r26, 0x38	; 56
 480:	b0 e0       	ldi	r27, 0x00	; 0
 482:	e8 e3       	ldi	r30, 0x38	; 56
 484:	f0 e0       	ldi	r31, 0x00	; 0
 486:	80 81       	ld	r24, Z
 488:	48 2f       	mov	r20, r24
 48a:	89 81       	ldd	r24, Y+1	; 0x01
 48c:	28 2f       	mov	r18, r24
 48e:	30 e0       	ldi	r19, 0x00	; 0
 490:	81 e0       	ldi	r24, 0x01	; 1
 492:	90 e0       	ldi	r25, 0x00	; 0
 494:	02 2e       	mov	r0, r18
 496:	02 c0       	rjmp	.+4      	; 0x49c <WRITE_PIN+0xe4>
 498:	88 0f       	add	r24, r24
 49a:	99 1f       	adc	r25, r25
 49c:	0a 94       	dec	r0
 49e:	e2 f7       	brpl	.-8      	; 0x498 <WRITE_PIN+0xe0>
 4a0:	80 95       	com	r24
 4a2:	84 23       	and	r24, r20
 4a4:	8c 93       	st	X, r24
 4a6:	6b c0       	rjmp	.+214    	; 0x57e <WRITE_PIN+0x1c6>

		}
		else {
			SET_BIT(PORTB  , pin_num) ;
 4a8:	a8 e3       	ldi	r26, 0x38	; 56
 4aa:	b0 e0       	ldi	r27, 0x00	; 0
 4ac:	e8 e3       	ldi	r30, 0x38	; 56
 4ae:	f0 e0       	ldi	r31, 0x00	; 0
 4b0:	80 81       	ld	r24, Z
 4b2:	48 2f       	mov	r20, r24
 4b4:	89 81       	ldd	r24, Y+1	; 0x01
 4b6:	28 2f       	mov	r18, r24
 4b8:	30 e0       	ldi	r19, 0x00	; 0
 4ba:	81 e0       	ldi	r24, 0x01	; 1
 4bc:	90 e0       	ldi	r25, 0x00	; 0
 4be:	02 2e       	mov	r0, r18
 4c0:	02 c0       	rjmp	.+4      	; 0x4c6 <WRITE_PIN+0x10e>
 4c2:	88 0f       	add	r24, r24
 4c4:	99 1f       	adc	r25, r25
 4c6:	0a 94       	dec	r0
 4c8:	e2 f7       	brpl	.-8      	; 0x4c2 <WRITE_PIN+0x10a>
 4ca:	84 2b       	or	r24, r20
 4cc:	8c 93       	st	X, r24
 4ce:	57 c0       	rjmp	.+174    	; 0x57e <WRITE_PIN+0x1c6>

		}
	break;
	case PORTC_ID :
			if(value == LOGIC_LOW) {
 4d0:	8b 81       	ldd	r24, Y+3	; 0x03
 4d2:	88 23       	and	r24, r24
 4d4:	a9 f4       	brne	.+42     	; 0x500 <WRITE_PIN+0x148>
				CLEAR_BIT (PORTC , pin_num) ;
 4d6:	a5 e3       	ldi	r26, 0x35	; 53
 4d8:	b0 e0       	ldi	r27, 0x00	; 0
 4da:	e5 e3       	ldi	r30, 0x35	; 53
 4dc:	f0 e0       	ldi	r31, 0x00	; 0
 4de:	80 81       	ld	r24, Z
 4e0:	48 2f       	mov	r20, r24
 4e2:	89 81       	ldd	r24, Y+1	; 0x01
 4e4:	28 2f       	mov	r18, r24
 4e6:	30 e0       	ldi	r19, 0x00	; 0
 4e8:	81 e0       	ldi	r24, 0x01	; 1
 4ea:	90 e0       	ldi	r25, 0x00	; 0
 4ec:	02 2e       	mov	r0, r18
 4ee:	02 c0       	rjmp	.+4      	; 0x4f4 <WRITE_PIN+0x13c>
 4f0:	88 0f       	add	r24, r24
 4f2:	99 1f       	adc	r25, r25
 4f4:	0a 94       	dec	r0
 4f6:	e2 f7       	brpl	.-8      	; 0x4f0 <WRITE_PIN+0x138>
 4f8:	80 95       	com	r24
 4fa:	84 23       	and	r24, r20
 4fc:	8c 93       	st	X, r24
 4fe:	3f c0       	rjmp	.+126    	; 0x57e <WRITE_PIN+0x1c6>

			}
			else {
				SET_BIT(PORTC  , pin_num) ;
 500:	a5 e3       	ldi	r26, 0x35	; 53
 502:	b0 e0       	ldi	r27, 0x00	; 0
 504:	e5 e3       	ldi	r30, 0x35	; 53
 506:	f0 e0       	ldi	r31, 0x00	; 0
 508:	80 81       	ld	r24, Z
 50a:	48 2f       	mov	r20, r24
 50c:	89 81       	ldd	r24, Y+1	; 0x01
 50e:	28 2f       	mov	r18, r24
 510:	30 e0       	ldi	r19, 0x00	; 0
 512:	81 e0       	ldi	r24, 0x01	; 1
 514:	90 e0       	ldi	r25, 0x00	; 0
 516:	02 2e       	mov	r0, r18
 518:	02 c0       	rjmp	.+4      	; 0x51e <WRITE_PIN+0x166>
 51a:	88 0f       	add	r24, r24
 51c:	99 1f       	adc	r25, r25
 51e:	0a 94       	dec	r0
 520:	e2 f7       	brpl	.-8      	; 0x51a <WRITE_PIN+0x162>
 522:	84 2b       	or	r24, r20
 524:	8c 93       	st	X, r24
 526:	2b c0       	rjmp	.+86     	; 0x57e <WRITE_PIN+0x1c6>

			}
	break;
	case PORTD_ID :
	if(value == LOGIC_LOW) {
 528:	8b 81       	ldd	r24, Y+3	; 0x03
 52a:	88 23       	and	r24, r24
 52c:	a9 f4       	brne	.+42     	; 0x558 <WRITE_PIN+0x1a0>
		CLEAR_BIT (PORTD , pin_num) ;
 52e:	a2 e3       	ldi	r26, 0x32	; 50
 530:	b0 e0       	ldi	r27, 0x00	; 0
 532:	e2 e3       	ldi	r30, 0x32	; 50
 534:	f0 e0       	ldi	r31, 0x00	; 0
 536:	80 81       	ld	r24, Z
 538:	48 2f       	mov	r20, r24
 53a:	89 81       	ldd	r24, Y+1	; 0x01
 53c:	28 2f       	mov	r18, r24
 53e:	30 e0       	ldi	r19, 0x00	; 0
 540:	81 e0       	ldi	r24, 0x01	; 1
 542:	90 e0       	ldi	r25, 0x00	; 0
 544:	02 2e       	mov	r0, r18
 546:	02 c0       	rjmp	.+4      	; 0x54c <WRITE_PIN+0x194>
 548:	88 0f       	add	r24, r24
 54a:	99 1f       	adc	r25, r25
 54c:	0a 94       	dec	r0
 54e:	e2 f7       	brpl	.-8      	; 0x548 <WRITE_PIN+0x190>
 550:	80 95       	com	r24
 552:	84 23       	and	r24, r20
 554:	8c 93       	st	X, r24
 556:	13 c0       	rjmp	.+38     	; 0x57e <WRITE_PIN+0x1c6>

	}
	else {
		SET_BIT(PORTD , pin_num) ;
 558:	a2 e3       	ldi	r26, 0x32	; 50
 55a:	b0 e0       	ldi	r27, 0x00	; 0
 55c:	e2 e3       	ldi	r30, 0x32	; 50
 55e:	f0 e0       	ldi	r31, 0x00	; 0
 560:	80 81       	ld	r24, Z
 562:	48 2f       	mov	r20, r24
 564:	89 81       	ldd	r24, Y+1	; 0x01
 566:	28 2f       	mov	r18, r24
 568:	30 e0       	ldi	r19, 0x00	; 0
 56a:	81 e0       	ldi	r24, 0x01	; 1
 56c:	90 e0       	ldi	r25, 0x00	; 0
 56e:	02 2e       	mov	r0, r18
 570:	02 c0       	rjmp	.+4      	; 0x576 <WRITE_PIN+0x1be>
 572:	88 0f       	add	r24, r24
 574:	99 1f       	adc	r25, r25
 576:	0a 94       	dec	r0
 578:	e2 f7       	brpl	.-8      	; 0x572 <WRITE_PIN+0x1ba>
 57a:	84 2b       	or	r24, r20
 57c:	8c 93       	st	X, r24

}

	}

}
 57e:	0f 90       	pop	r0
 580:	0f 90       	pop	r0
 582:	0f 90       	pop	r0
 584:	0f 90       	pop	r0
 586:	0f 90       	pop	r0
 588:	cf 91       	pop	r28
 58a:	df 91       	pop	r29
 58c:	08 95       	ret

0000058e <READ_PIN>:
uint8 READ_PIN (uint8 pin_num , uint8 port_num ) {
 58e:	df 93       	push	r29
 590:	cf 93       	push	r28
 592:	00 d0       	rcall	.+0      	; 0x594 <READ_PIN+0x6>
 594:	00 d0       	rcall	.+0      	; 0x596 <READ_PIN+0x8>
 596:	0f 92       	push	r0
 598:	cd b7       	in	r28, 0x3d	; 61
 59a:	de b7       	in	r29, 0x3e	; 62
 59c:	8a 83       	std	Y+2, r24	; 0x02
 59e:	6b 83       	std	Y+3, r22	; 0x03
	uint8 value = LOGIC_LOW  ;
 5a0:	19 82       	std	Y+1, r1	; 0x01
	if((pin_num >= PIN_NUM)||(port_num >= PORT_NUM)) {
 5a2:	8a 81       	ldd	r24, Y+2	; 0x02
 5a4:	88 30       	cpi	r24, 0x08	; 8
 5a6:	08 f0       	brcs	.+2      	; 0x5aa <READ_PIN+0x1c>
 5a8:	84 c0       	rjmp	.+264    	; 0x6b2 <READ_PIN+0x124>
 5aa:	8b 81       	ldd	r24, Y+3	; 0x03
 5ac:	84 30       	cpi	r24, 0x04	; 4
 5ae:	08 f0       	brcs	.+2      	; 0x5b2 <READ_PIN+0x24>
 5b0:	80 c0       	rjmp	.+256    	; 0x6b2 <READ_PIN+0x124>
		// DO NOTHING
	}
	else {
		switch(port_num) {
 5b2:	8b 81       	ldd	r24, Y+3	; 0x03
 5b4:	28 2f       	mov	r18, r24
 5b6:	30 e0       	ldi	r19, 0x00	; 0
 5b8:	3d 83       	std	Y+5, r19	; 0x05
 5ba:	2c 83       	std	Y+4, r18	; 0x04
 5bc:	4c 81       	ldd	r20, Y+4	; 0x04
 5be:	5d 81       	ldd	r21, Y+5	; 0x05
 5c0:	41 30       	cpi	r20, 0x01	; 1
 5c2:	51 05       	cpc	r21, r1
 5c4:	79 f1       	breq	.+94     	; 0x624 <READ_PIN+0x96>
 5c6:	8c 81       	ldd	r24, Y+4	; 0x04
 5c8:	9d 81       	ldd	r25, Y+5	; 0x05
 5ca:	82 30       	cpi	r24, 0x02	; 2
 5cc:	91 05       	cpc	r25, r1
 5ce:	34 f4       	brge	.+12     	; 0x5dc <READ_PIN+0x4e>
 5d0:	2c 81       	ldd	r18, Y+4	; 0x04
 5d2:	3d 81       	ldd	r19, Y+5	; 0x05
 5d4:	21 15       	cp	r18, r1
 5d6:	31 05       	cpc	r19, r1
 5d8:	69 f0       	breq	.+26     	; 0x5f4 <READ_PIN+0x66>
 5da:	6b c0       	rjmp	.+214    	; 0x6b2 <READ_PIN+0x124>
 5dc:	4c 81       	ldd	r20, Y+4	; 0x04
 5de:	5d 81       	ldd	r21, Y+5	; 0x05
 5e0:	42 30       	cpi	r20, 0x02	; 2
 5e2:	51 05       	cpc	r21, r1
 5e4:	b9 f1       	breq	.+110    	; 0x654 <READ_PIN+0xc6>
 5e6:	8c 81       	ldd	r24, Y+4	; 0x04
 5e8:	9d 81       	ldd	r25, Y+5	; 0x05
 5ea:	83 30       	cpi	r24, 0x03	; 3
 5ec:	91 05       	cpc	r25, r1
 5ee:	09 f4       	brne	.+2      	; 0x5f2 <READ_PIN+0x64>
 5f0:	49 c0       	rjmp	.+146    	; 0x684 <READ_PIN+0xf6>
 5f2:	5f c0       	rjmp	.+190    	; 0x6b2 <READ_PIN+0x124>
		case PORTA_ID :
		if(BIT_IS_SET(PINA , pin_num)) {
 5f4:	e9 e3       	ldi	r30, 0x39	; 57
 5f6:	f0 e0       	ldi	r31, 0x00	; 0
 5f8:	80 81       	ld	r24, Z
 5fa:	28 2f       	mov	r18, r24
 5fc:	30 e0       	ldi	r19, 0x00	; 0
 5fe:	8a 81       	ldd	r24, Y+2	; 0x02
 600:	88 2f       	mov	r24, r24
 602:	90 e0       	ldi	r25, 0x00	; 0
 604:	a9 01       	movw	r20, r18
 606:	02 c0       	rjmp	.+4      	; 0x60c <READ_PIN+0x7e>
 608:	55 95       	asr	r21
 60a:	47 95       	ror	r20
 60c:	8a 95       	dec	r24
 60e:	e2 f7       	brpl	.-8      	; 0x608 <READ_PIN+0x7a>
 610:	ca 01       	movw	r24, r20
 612:	81 70       	andi	r24, 0x01	; 1
 614:	90 70       	andi	r25, 0x00	; 0
 616:	88 23       	and	r24, r24
 618:	19 f0       	breq	.+6      	; 0x620 <READ_PIN+0x92>
			value = LOGIC_HIGH ;
 61a:	81 e0       	ldi	r24, 0x01	; 1
 61c:	89 83       	std	Y+1, r24	; 0x01
 61e:	49 c0       	rjmp	.+146    	; 0x6b2 <READ_PIN+0x124>
		}
		else {
			value = LOGIC_LOW ;
 620:	19 82       	std	Y+1, r1	; 0x01
 622:	47 c0       	rjmp	.+142    	; 0x6b2 <READ_PIN+0x124>

		}
		break;
		case PORTB_ID :
		if(BIT_IS_SET(PINB , pin_num)) {
 624:	e6 e3       	ldi	r30, 0x36	; 54
 626:	f0 e0       	ldi	r31, 0x00	; 0
 628:	80 81       	ld	r24, Z
 62a:	28 2f       	mov	r18, r24
 62c:	30 e0       	ldi	r19, 0x00	; 0
 62e:	8a 81       	ldd	r24, Y+2	; 0x02
 630:	88 2f       	mov	r24, r24
 632:	90 e0       	ldi	r25, 0x00	; 0
 634:	a9 01       	movw	r20, r18
 636:	02 c0       	rjmp	.+4      	; 0x63c <READ_PIN+0xae>
 638:	55 95       	asr	r21
 63a:	47 95       	ror	r20
 63c:	8a 95       	dec	r24
 63e:	e2 f7       	brpl	.-8      	; 0x638 <READ_PIN+0xaa>
 640:	ca 01       	movw	r24, r20
 642:	81 70       	andi	r24, 0x01	; 1
 644:	90 70       	andi	r25, 0x00	; 0
 646:	88 23       	and	r24, r24
 648:	19 f0       	breq	.+6      	; 0x650 <READ_PIN+0xc2>
			value = LOGIC_HIGH ;
 64a:	81 e0       	ldi	r24, 0x01	; 1
 64c:	89 83       	std	Y+1, r24	; 0x01
 64e:	31 c0       	rjmp	.+98     	; 0x6b2 <READ_PIN+0x124>
		}
		else {
			value = LOGIC_LOW ;
 650:	19 82       	std	Y+1, r1	; 0x01
 652:	2f c0       	rjmp	.+94     	; 0x6b2 <READ_PIN+0x124>

		}
		break;
		case PORTC_ID :
		if(BIT_IS_SET(PINC , pin_num)) {
 654:	e3 e3       	ldi	r30, 0x33	; 51
 656:	f0 e0       	ldi	r31, 0x00	; 0
 658:	80 81       	ld	r24, Z
 65a:	28 2f       	mov	r18, r24
 65c:	30 e0       	ldi	r19, 0x00	; 0
 65e:	8a 81       	ldd	r24, Y+2	; 0x02
 660:	88 2f       	mov	r24, r24
 662:	90 e0       	ldi	r25, 0x00	; 0
 664:	a9 01       	movw	r20, r18
 666:	02 c0       	rjmp	.+4      	; 0x66c <READ_PIN+0xde>
 668:	55 95       	asr	r21
 66a:	47 95       	ror	r20
 66c:	8a 95       	dec	r24
 66e:	e2 f7       	brpl	.-8      	; 0x668 <READ_PIN+0xda>
 670:	ca 01       	movw	r24, r20
 672:	81 70       	andi	r24, 0x01	; 1
 674:	90 70       	andi	r25, 0x00	; 0
 676:	88 23       	and	r24, r24
 678:	19 f0       	breq	.+6      	; 0x680 <READ_PIN+0xf2>
			value = LOGIC_HIGH ;
 67a:	81 e0       	ldi	r24, 0x01	; 1
 67c:	89 83       	std	Y+1, r24	; 0x01
 67e:	19 c0       	rjmp	.+50     	; 0x6b2 <READ_PIN+0x124>
		}
		else {
			value = LOGIC_LOW ;
 680:	19 82       	std	Y+1, r1	; 0x01
 682:	17 c0       	rjmp	.+46     	; 0x6b2 <READ_PIN+0x124>

		}
		break ;
		case PORTD_ID :
		if(BIT_IS_SET(PIND , pin_num)) {
 684:	e0 e3       	ldi	r30, 0x30	; 48
 686:	f0 e0       	ldi	r31, 0x00	; 0
 688:	80 81       	ld	r24, Z
 68a:	28 2f       	mov	r18, r24
 68c:	30 e0       	ldi	r19, 0x00	; 0
 68e:	8a 81       	ldd	r24, Y+2	; 0x02
 690:	88 2f       	mov	r24, r24
 692:	90 e0       	ldi	r25, 0x00	; 0
 694:	a9 01       	movw	r20, r18
 696:	02 c0       	rjmp	.+4      	; 0x69c <READ_PIN+0x10e>
 698:	55 95       	asr	r21
 69a:	47 95       	ror	r20
 69c:	8a 95       	dec	r24
 69e:	e2 f7       	brpl	.-8      	; 0x698 <READ_PIN+0x10a>
 6a0:	ca 01       	movw	r24, r20
 6a2:	81 70       	andi	r24, 0x01	; 1
 6a4:	90 70       	andi	r25, 0x00	; 0
 6a6:	88 23       	and	r24, r24
 6a8:	19 f0       	breq	.+6      	; 0x6b0 <READ_PIN+0x122>
			value = LOGIC_HIGH ;
 6aa:	81 e0       	ldi	r24, 0x01	; 1
 6ac:	89 83       	std	Y+1, r24	; 0x01
 6ae:	01 c0       	rjmp	.+2      	; 0x6b2 <READ_PIN+0x124>
		}
		else {
			value = LOGIC_LOW ;
 6b0:	19 82       	std	Y+1, r1	; 0x01


		}

	}
	return value ;
 6b2:	89 81       	ldd	r24, Y+1	; 0x01
}
 6b4:	0f 90       	pop	r0
 6b6:	0f 90       	pop	r0
 6b8:	0f 90       	pop	r0
 6ba:	0f 90       	pop	r0
 6bc:	0f 90       	pop	r0
 6be:	cf 91       	pop	r28
 6c0:	df 91       	pop	r29
 6c2:	08 95       	ret

000006c4 <PORT_DIRECTION>:
void PORT_DIRECTION (uint8 port_num , DIO_PORT_DIRECTION direction )  {
 6c4:	df 93       	push	r29
 6c6:	cf 93       	push	r28
 6c8:	00 d0       	rcall	.+0      	; 0x6ca <PORT_DIRECTION+0x6>
 6ca:	00 d0       	rcall	.+0      	; 0x6cc <PORT_DIRECTION+0x8>
 6cc:	cd b7       	in	r28, 0x3d	; 61
 6ce:	de b7       	in	r29, 0x3e	; 62
 6d0:	89 83       	std	Y+1, r24	; 0x01
 6d2:	6a 83       	std	Y+2, r22	; 0x02
	if(port_num >= PORT_NUM){
 6d4:	89 81       	ldd	r24, Y+1	; 0x01
 6d6:	84 30       	cpi	r24, 0x04	; 4
 6d8:	90 f5       	brcc	.+100    	; 0x73e <PORT_DIRECTION+0x7a>

	}

	else {
		switch(port_num) {
 6da:	89 81       	ldd	r24, Y+1	; 0x01
 6dc:	28 2f       	mov	r18, r24
 6de:	30 e0       	ldi	r19, 0x00	; 0
 6e0:	3c 83       	std	Y+4, r19	; 0x04
 6e2:	2b 83       	std	Y+3, r18	; 0x03
 6e4:	8b 81       	ldd	r24, Y+3	; 0x03
 6e6:	9c 81       	ldd	r25, Y+4	; 0x04
 6e8:	81 30       	cpi	r24, 0x01	; 1
 6ea:	91 05       	cpc	r25, r1
 6ec:	d1 f0       	breq	.+52     	; 0x722 <PORT_DIRECTION+0x5e>
 6ee:	2b 81       	ldd	r18, Y+3	; 0x03
 6f0:	3c 81       	ldd	r19, Y+4	; 0x04
 6f2:	22 30       	cpi	r18, 0x02	; 2
 6f4:	31 05       	cpc	r19, r1
 6f6:	2c f4       	brge	.+10     	; 0x702 <PORT_DIRECTION+0x3e>
 6f8:	8b 81       	ldd	r24, Y+3	; 0x03
 6fa:	9c 81       	ldd	r25, Y+4	; 0x04
 6fc:	00 97       	sbiw	r24, 0x00	; 0
 6fe:	61 f0       	breq	.+24     	; 0x718 <PORT_DIRECTION+0x54>
 700:	1e c0       	rjmp	.+60     	; 0x73e <PORT_DIRECTION+0x7a>
 702:	2b 81       	ldd	r18, Y+3	; 0x03
 704:	3c 81       	ldd	r19, Y+4	; 0x04
 706:	22 30       	cpi	r18, 0x02	; 2
 708:	31 05       	cpc	r19, r1
 70a:	81 f0       	breq	.+32     	; 0x72c <PORT_DIRECTION+0x68>
 70c:	8b 81       	ldd	r24, Y+3	; 0x03
 70e:	9c 81       	ldd	r25, Y+4	; 0x04
 710:	83 30       	cpi	r24, 0x03	; 3
 712:	91 05       	cpc	r25, r1
 714:	81 f0       	breq	.+32     	; 0x736 <PORT_DIRECTION+0x72>
 716:	13 c0       	rjmp	.+38     	; 0x73e <PORT_DIRECTION+0x7a>
			case PORTA_ID :
			DDRA = direction  ;
 718:	ea e3       	ldi	r30, 0x3A	; 58
 71a:	f0 e0       	ldi	r31, 0x00	; 0
 71c:	8a 81       	ldd	r24, Y+2	; 0x02
 71e:	80 83       	st	Z, r24
 720:	0e c0       	rjmp	.+28     	; 0x73e <PORT_DIRECTION+0x7a>
			break ;
			case PORTB_ID :
			DDRB = direction  ;
 722:	e7 e3       	ldi	r30, 0x37	; 55
 724:	f0 e0       	ldi	r31, 0x00	; 0
 726:	8a 81       	ldd	r24, Y+2	; 0x02
 728:	80 83       	st	Z, r24
 72a:	09 c0       	rjmp	.+18     	; 0x73e <PORT_DIRECTION+0x7a>
			break ;
			case PORTC_ID :
			DDRC = direction  ;
 72c:	e4 e3       	ldi	r30, 0x34	; 52
 72e:	f0 e0       	ldi	r31, 0x00	; 0
 730:	8a 81       	ldd	r24, Y+2	; 0x02
 732:	80 83       	st	Z, r24
 734:	04 c0       	rjmp	.+8      	; 0x73e <PORT_DIRECTION+0x7a>
			break ;
			case PORTD_ID :
			DDRD = direction  ;
 736:	e1 e3       	ldi	r30, 0x31	; 49
 738:	f0 e0       	ldi	r31, 0x00	; 0
 73a:	8a 81       	ldd	r24, Y+2	; 0x02
 73c:	80 83       	st	Z, r24

		}


	}
}
 73e:	0f 90       	pop	r0
 740:	0f 90       	pop	r0
 742:	0f 90       	pop	r0
 744:	0f 90       	pop	r0
 746:	cf 91       	pop	r28
 748:	df 91       	pop	r29
 74a:	08 95       	ret

0000074c <WRITE_PORT>:
void WRITE_PORT (uint8 port_num  , uint8 value )  {
 74c:	df 93       	push	r29
 74e:	cf 93       	push	r28
 750:	00 d0       	rcall	.+0      	; 0x752 <WRITE_PORT+0x6>
 752:	00 d0       	rcall	.+0      	; 0x754 <WRITE_PORT+0x8>
 754:	cd b7       	in	r28, 0x3d	; 61
 756:	de b7       	in	r29, 0x3e	; 62
 758:	89 83       	std	Y+1, r24	; 0x01
 75a:	6a 83       	std	Y+2, r22	; 0x02
	if(port_num >= PORT_NUM){
 75c:	89 81       	ldd	r24, Y+1	; 0x01
 75e:	84 30       	cpi	r24, 0x04	; 4
 760:	90 f5       	brcc	.+100    	; 0x7c6 <WRITE_PORT+0x7a>

	}

	else {
		switch (port_num) {
 762:	89 81       	ldd	r24, Y+1	; 0x01
 764:	28 2f       	mov	r18, r24
 766:	30 e0       	ldi	r19, 0x00	; 0
 768:	3c 83       	std	Y+4, r19	; 0x04
 76a:	2b 83       	std	Y+3, r18	; 0x03
 76c:	8b 81       	ldd	r24, Y+3	; 0x03
 76e:	9c 81       	ldd	r25, Y+4	; 0x04
 770:	81 30       	cpi	r24, 0x01	; 1
 772:	91 05       	cpc	r25, r1
 774:	d1 f0       	breq	.+52     	; 0x7aa <WRITE_PORT+0x5e>
 776:	2b 81       	ldd	r18, Y+3	; 0x03
 778:	3c 81       	ldd	r19, Y+4	; 0x04
 77a:	22 30       	cpi	r18, 0x02	; 2
 77c:	31 05       	cpc	r19, r1
 77e:	2c f4       	brge	.+10     	; 0x78a <WRITE_PORT+0x3e>
 780:	8b 81       	ldd	r24, Y+3	; 0x03
 782:	9c 81       	ldd	r25, Y+4	; 0x04
 784:	00 97       	sbiw	r24, 0x00	; 0
 786:	61 f0       	breq	.+24     	; 0x7a0 <WRITE_PORT+0x54>
 788:	1e c0       	rjmp	.+60     	; 0x7c6 <WRITE_PORT+0x7a>
 78a:	2b 81       	ldd	r18, Y+3	; 0x03
 78c:	3c 81       	ldd	r19, Y+4	; 0x04
 78e:	22 30       	cpi	r18, 0x02	; 2
 790:	31 05       	cpc	r19, r1
 792:	81 f0       	breq	.+32     	; 0x7b4 <WRITE_PORT+0x68>
 794:	8b 81       	ldd	r24, Y+3	; 0x03
 796:	9c 81       	ldd	r25, Y+4	; 0x04
 798:	83 30       	cpi	r24, 0x03	; 3
 79a:	91 05       	cpc	r25, r1
 79c:	81 f0       	breq	.+32     	; 0x7be <WRITE_PORT+0x72>
 79e:	13 c0       	rjmp	.+38     	; 0x7c6 <WRITE_PORT+0x7a>
			case PORTA_ID :
			PORTA = value ;
 7a0:	eb e3       	ldi	r30, 0x3B	; 59
 7a2:	f0 e0       	ldi	r31, 0x00	; 0
 7a4:	8a 81       	ldd	r24, Y+2	; 0x02
 7a6:	80 83       	st	Z, r24
 7a8:	0e c0       	rjmp	.+28     	; 0x7c6 <WRITE_PORT+0x7a>
			break ;
			case PORTB_ID :
			PORTB = value ;
 7aa:	e8 e3       	ldi	r30, 0x38	; 56
 7ac:	f0 e0       	ldi	r31, 0x00	; 0
 7ae:	8a 81       	ldd	r24, Y+2	; 0x02
 7b0:	80 83       	st	Z, r24
 7b2:	09 c0       	rjmp	.+18     	; 0x7c6 <WRITE_PORT+0x7a>
			break ;
			case PORTC_ID :
			PORTC = value ;
 7b4:	e5 e3       	ldi	r30, 0x35	; 53
 7b6:	f0 e0       	ldi	r31, 0x00	; 0
 7b8:	8a 81       	ldd	r24, Y+2	; 0x02
 7ba:	80 83       	st	Z, r24
 7bc:	04 c0       	rjmp	.+8      	; 0x7c6 <WRITE_PORT+0x7a>
			break ;
			case PORTD_ID :
			PORTD = value  ;
 7be:	e2 e3       	ldi	r30, 0x32	; 50
 7c0:	f0 e0       	ldi	r31, 0x00	; 0
 7c2:	8a 81       	ldd	r24, Y+2	; 0x02
 7c4:	80 83       	st	Z, r24
			break ;


		}
	}
}
 7c6:	0f 90       	pop	r0
 7c8:	0f 90       	pop	r0
 7ca:	0f 90       	pop	r0
 7cc:	0f 90       	pop	r0
 7ce:	cf 91       	pop	r28
 7d0:	df 91       	pop	r29
 7d2:	08 95       	ret

000007d4 <READ_PORT>:
uint8 READ_PORT(uint8 port_num)  {
 7d4:	df 93       	push	r29
 7d6:	cf 93       	push	r28
 7d8:	00 d0       	rcall	.+0      	; 0x7da <READ_PORT+0x6>
 7da:	00 d0       	rcall	.+0      	; 0x7dc <READ_PORT+0x8>
 7dc:	cd b7       	in	r28, 0x3d	; 61
 7de:	de b7       	in	r29, 0x3e	; 62
 7e0:	8a 83       	std	Y+2, r24	; 0x02
	uint8 port_value = LOGIC_LOW ;
 7e2:	19 82       	std	Y+1, r1	; 0x01
	if(port_num >= PORT_NUM){
 7e4:	8a 81       	ldd	r24, Y+2	; 0x02
 7e6:	84 30       	cpi	r24, 0x04	; 4
 7e8:	90 f5       	brcc	.+100    	; 0x84e <READ_PORT+0x7a>
		// DO_NOTHING
	}

	else {
		switch (port_num) {
 7ea:	8a 81       	ldd	r24, Y+2	; 0x02
 7ec:	28 2f       	mov	r18, r24
 7ee:	30 e0       	ldi	r19, 0x00	; 0
 7f0:	3c 83       	std	Y+4, r19	; 0x04
 7f2:	2b 83       	std	Y+3, r18	; 0x03
 7f4:	8b 81       	ldd	r24, Y+3	; 0x03
 7f6:	9c 81       	ldd	r25, Y+4	; 0x04
 7f8:	81 30       	cpi	r24, 0x01	; 1
 7fa:	91 05       	cpc	r25, r1
 7fc:	d1 f0       	breq	.+52     	; 0x832 <READ_PORT+0x5e>
 7fe:	2b 81       	ldd	r18, Y+3	; 0x03
 800:	3c 81       	ldd	r19, Y+4	; 0x04
 802:	22 30       	cpi	r18, 0x02	; 2
 804:	31 05       	cpc	r19, r1
 806:	2c f4       	brge	.+10     	; 0x812 <READ_PORT+0x3e>
 808:	8b 81       	ldd	r24, Y+3	; 0x03
 80a:	9c 81       	ldd	r25, Y+4	; 0x04
 80c:	00 97       	sbiw	r24, 0x00	; 0
 80e:	61 f0       	breq	.+24     	; 0x828 <READ_PORT+0x54>
 810:	1e c0       	rjmp	.+60     	; 0x84e <READ_PORT+0x7a>
 812:	2b 81       	ldd	r18, Y+3	; 0x03
 814:	3c 81       	ldd	r19, Y+4	; 0x04
 816:	22 30       	cpi	r18, 0x02	; 2
 818:	31 05       	cpc	r19, r1
 81a:	81 f0       	breq	.+32     	; 0x83c <READ_PORT+0x68>
 81c:	8b 81       	ldd	r24, Y+3	; 0x03
 81e:	9c 81       	ldd	r25, Y+4	; 0x04
 820:	83 30       	cpi	r24, 0x03	; 3
 822:	91 05       	cpc	r25, r1
 824:	81 f0       	breq	.+32     	; 0x846 <READ_PORT+0x72>
 826:	13 c0       	rjmp	.+38     	; 0x84e <READ_PORT+0x7a>
			case PORTA_ID :
			port_value = PINA  ;
 828:	e9 e3       	ldi	r30, 0x39	; 57
 82a:	f0 e0       	ldi	r31, 0x00	; 0
 82c:	80 81       	ld	r24, Z
 82e:	89 83       	std	Y+1, r24	; 0x01
 830:	0e c0       	rjmp	.+28     	; 0x84e <READ_PORT+0x7a>
			break ;
			case PORTB_ID :
			port_value = PINB  ;
 832:	e6 e3       	ldi	r30, 0x36	; 54
 834:	f0 e0       	ldi	r31, 0x00	; 0
 836:	80 81       	ld	r24, Z
 838:	89 83       	std	Y+1, r24	; 0x01
 83a:	09 c0       	rjmp	.+18     	; 0x84e <READ_PORT+0x7a>
			break ;
			case PORTC_ID :
			port_value = PINC  ;
 83c:	e3 e3       	ldi	r30, 0x33	; 51
 83e:	f0 e0       	ldi	r31, 0x00	; 0
 840:	80 81       	ld	r24, Z
 842:	89 83       	std	Y+1, r24	; 0x01
 844:	04 c0       	rjmp	.+8      	; 0x84e <READ_PORT+0x7a>
			break ;
			case PORTD_ID :
			port_value = PIND  ;
 846:	e0 e3       	ldi	r30, 0x30	; 48
 848:	f0 e0       	ldi	r31, 0x00	; 0
 84a:	80 81       	ld	r24, Z
 84c:	89 83       	std	Y+1, r24	; 0x01
			break ;


	}
}
return port_value ;
 84e:	89 81       	ldd	r24, Y+1	; 0x01
}
 850:	0f 90       	pop	r0
 852:	0f 90       	pop	r0
 854:	0f 90       	pop	r0
 856:	0f 90       	pop	r0
 858:	cf 91       	pop	r28
 85a:	df 91       	pop	r29
 85c:	08 95       	ret

0000085e <LED_INIT>:
 *
 * Created: 9/6/2022 12:27:10 AM
 *  Author: Abdelrahman M leithy
 */
#include "led.h"
void LED_INIT(uint8 pin_num , uint8 port_num)  {
 85e:	df 93       	push	r29
 860:	cf 93       	push	r28
 862:	00 d0       	rcall	.+0      	; 0x864 <__stack+0x5>
 864:	cd b7       	in	r28, 0x3d	; 61
 866:	de b7       	in	r29, 0x3e	; 62
 868:	89 83       	std	Y+1, r24	; 0x01
 86a:	6a 83       	std	Y+2, r22	; 0x02
PIN_DIRECTION(pin_num , port_num , PIN_OUTPUT) ;
 86c:	89 81       	ldd	r24, Y+1	; 0x01
 86e:	6a 81       	ldd	r22, Y+2	; 0x02
 870:	41 e0       	ldi	r20, 0x01	; 1
 872:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <PIN_DIRECTION>
WRITE_PIN(pin_num , port_num , LOGIC_LOW) ;
 876:	89 81       	ldd	r24, Y+1	; 0x01
 878:	6a 81       	ldd	r22, Y+2	; 0x02
 87a:	40 e0       	ldi	r20, 0x00	; 0
 87c:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <WRITE_PIN>
}
 880:	0f 90       	pop	r0
 882:	0f 90       	pop	r0
 884:	cf 91       	pop	r28
 886:	df 91       	pop	r29
 888:	08 95       	ret

0000088a <LED_OFF>:
void LED_OFF (uint8 pin_num , uint8 port_num ) {
 88a:	df 93       	push	r29
 88c:	cf 93       	push	r28
 88e:	00 d0       	rcall	.+0      	; 0x890 <LED_OFF+0x6>
 890:	cd b7       	in	r28, 0x3d	; 61
 892:	de b7       	in	r29, 0x3e	; 62
 894:	89 83       	std	Y+1, r24	; 0x01
 896:	6a 83       	std	Y+2, r22	; 0x02
   WRITE_PIN(pin_num , port_num , LOGIC_LOW) ;
 898:	89 81       	ldd	r24, Y+1	; 0x01
 89a:	6a 81       	ldd	r22, Y+2	; 0x02
 89c:	40 e0       	ldi	r20, 0x00	; 0
 89e:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <WRITE_PIN>
}
 8a2:	0f 90       	pop	r0
 8a4:	0f 90       	pop	r0
 8a6:	cf 91       	pop	r28
 8a8:	df 91       	pop	r29
 8aa:	08 95       	ret

000008ac <LED_ON>:
void LED_ON (uint8 pin_num , uint8 port_num ) {
 8ac:	df 93       	push	r29
 8ae:	cf 93       	push	r28
 8b0:	00 d0       	rcall	.+0      	; 0x8b2 <LED_ON+0x6>
 8b2:	cd b7       	in	r28, 0x3d	; 61
 8b4:	de b7       	in	r29, 0x3e	; 62
 8b6:	89 83       	std	Y+1, r24	; 0x01
 8b8:	6a 83       	std	Y+2, r22	; 0x02
	WRITE_PIN(pin_num , port_num , LOGIC_HIGH) ;
 8ba:	89 81       	ldd	r24, Y+1	; 0x01
 8bc:	6a 81       	ldd	r22, Y+2	; 0x02
 8be:	41 e0       	ldi	r20, 0x01	; 1
 8c0:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <WRITE_PIN>

}
 8c4:	0f 90       	pop	r0
 8c6:	0f 90       	pop	r0
 8c8:	cf 91       	pop	r28
 8ca:	df 91       	pop	r29
 8cc:	08 95       	ret

000008ce <LED_TOGGLE>:
void LED_TOGGLE (uint8 pin_num , uint8 port_num)  {
 8ce:	df 93       	push	r29
 8d0:	cf 93       	push	r28
 8d2:	00 d0       	rcall	.+0      	; 0x8d4 <LED_TOGGLE+0x6>
 8d4:	00 d0       	rcall	.+0      	; 0x8d6 <LED_TOGGLE+0x8>
 8d6:	cd b7       	in	r28, 0x3d	; 61
 8d8:	de b7       	in	r29, 0x3e	; 62
 8da:	89 83       	std	Y+1, r24	; 0x01
 8dc:	6a 83       	std	Y+2, r22	; 0x02
	if((pin_num >=PIN_NUM)||(port_num >= PORT_NUM)) {
 8de:	89 81       	ldd	r24, Y+1	; 0x01
 8e0:	88 30       	cpi	r24, 0x08	; 8
 8e2:	08 f0       	brcs	.+2      	; 0x8e6 <LED_TOGGLE+0x18>
 8e4:	72 c0       	rjmp	.+228    	; 0x9ca <LED_TOGGLE+0xfc>
 8e6:	8a 81       	ldd	r24, Y+2	; 0x02
 8e8:	84 30       	cpi	r24, 0x04	; 4
 8ea:	08 f0       	brcs	.+2      	; 0x8ee <LED_TOGGLE+0x20>
 8ec:	6e c0       	rjmp	.+220    	; 0x9ca <LED_TOGGLE+0xfc>
		//DO NOTHING
	}
	else {
	switch(port_num) {
 8ee:	8a 81       	ldd	r24, Y+2	; 0x02
 8f0:	28 2f       	mov	r18, r24
 8f2:	30 e0       	ldi	r19, 0x00	; 0
 8f4:	3c 83       	std	Y+4, r19	; 0x04
 8f6:	2b 83       	std	Y+3, r18	; 0x03
 8f8:	8b 81       	ldd	r24, Y+3	; 0x03
 8fa:	9c 81       	ldd	r25, Y+4	; 0x04
 8fc:	81 30       	cpi	r24, 0x01	; 1
 8fe:	91 05       	cpc	r25, r1
 900:	49 f1       	breq	.+82     	; 0x954 <LED_TOGGLE+0x86>
 902:	2b 81       	ldd	r18, Y+3	; 0x03
 904:	3c 81       	ldd	r19, Y+4	; 0x04
 906:	22 30       	cpi	r18, 0x02	; 2
 908:	31 05       	cpc	r19, r1
 90a:	2c f4       	brge	.+10     	; 0x916 <LED_TOGGLE+0x48>
 90c:	8b 81       	ldd	r24, Y+3	; 0x03
 90e:	9c 81       	ldd	r25, Y+4	; 0x04
 910:	00 97       	sbiw	r24, 0x00	; 0
 912:	61 f0       	breq	.+24     	; 0x92c <LED_TOGGLE+0x5e>
 914:	5a c0       	rjmp	.+180    	; 0x9ca <LED_TOGGLE+0xfc>
 916:	2b 81       	ldd	r18, Y+3	; 0x03
 918:	3c 81       	ldd	r19, Y+4	; 0x04
 91a:	22 30       	cpi	r18, 0x02	; 2
 91c:	31 05       	cpc	r19, r1
 91e:	71 f1       	breq	.+92     	; 0x97c <LED_TOGGLE+0xae>
 920:	8b 81       	ldd	r24, Y+3	; 0x03
 922:	9c 81       	ldd	r25, Y+4	; 0x04
 924:	83 30       	cpi	r24, 0x03	; 3
 926:	91 05       	cpc	r25, r1
 928:	e9 f1       	breq	.+122    	; 0x9a4 <LED_TOGGLE+0xd6>
 92a:	4f c0       	rjmp	.+158    	; 0x9ca <LED_TOGGLE+0xfc>
		case PORTA_ID :
		TOGGLE_BIT(PORTA , pin_num) ;
 92c:	ab e3       	ldi	r26, 0x3B	; 59
 92e:	b0 e0       	ldi	r27, 0x00	; 0
 930:	eb e3       	ldi	r30, 0x3B	; 59
 932:	f0 e0       	ldi	r31, 0x00	; 0
 934:	80 81       	ld	r24, Z
 936:	48 2f       	mov	r20, r24
 938:	89 81       	ldd	r24, Y+1	; 0x01
 93a:	28 2f       	mov	r18, r24
 93c:	30 e0       	ldi	r19, 0x00	; 0
 93e:	81 e0       	ldi	r24, 0x01	; 1
 940:	90 e0       	ldi	r25, 0x00	; 0
 942:	02 2e       	mov	r0, r18
 944:	02 c0       	rjmp	.+4      	; 0x94a <LED_TOGGLE+0x7c>
 946:	88 0f       	add	r24, r24
 948:	99 1f       	adc	r25, r25
 94a:	0a 94       	dec	r0
 94c:	e2 f7       	brpl	.-8      	; 0x946 <LED_TOGGLE+0x78>
 94e:	84 27       	eor	r24, r20
 950:	8c 93       	st	X, r24
 952:	3b c0       	rjmp	.+118    	; 0x9ca <LED_TOGGLE+0xfc>
		break ;
		case PORTB_ID :
		TOGGLE_BIT(PORTB , pin_num) ;
 954:	a8 e3       	ldi	r26, 0x38	; 56
 956:	b0 e0       	ldi	r27, 0x00	; 0
 958:	e8 e3       	ldi	r30, 0x38	; 56
 95a:	f0 e0       	ldi	r31, 0x00	; 0
 95c:	80 81       	ld	r24, Z
 95e:	48 2f       	mov	r20, r24
 960:	89 81       	ldd	r24, Y+1	; 0x01
 962:	28 2f       	mov	r18, r24
 964:	30 e0       	ldi	r19, 0x00	; 0
 966:	81 e0       	ldi	r24, 0x01	; 1
 968:	90 e0       	ldi	r25, 0x00	; 0
 96a:	02 2e       	mov	r0, r18
 96c:	02 c0       	rjmp	.+4      	; 0x972 <LED_TOGGLE+0xa4>
 96e:	88 0f       	add	r24, r24
 970:	99 1f       	adc	r25, r25
 972:	0a 94       	dec	r0
 974:	e2 f7       	brpl	.-8      	; 0x96e <LED_TOGGLE+0xa0>
 976:	84 27       	eor	r24, r20
 978:	8c 93       	st	X, r24
 97a:	27 c0       	rjmp	.+78     	; 0x9ca <LED_TOGGLE+0xfc>
		break ;
		case PORTC_ID :
		TOGGLE_BIT(PORTC , pin_num) ;
 97c:	a5 e3       	ldi	r26, 0x35	; 53
 97e:	b0 e0       	ldi	r27, 0x00	; 0
 980:	e5 e3       	ldi	r30, 0x35	; 53
 982:	f0 e0       	ldi	r31, 0x00	; 0
 984:	80 81       	ld	r24, Z
 986:	48 2f       	mov	r20, r24
 988:	89 81       	ldd	r24, Y+1	; 0x01
 98a:	28 2f       	mov	r18, r24
 98c:	30 e0       	ldi	r19, 0x00	; 0
 98e:	81 e0       	ldi	r24, 0x01	; 1
 990:	90 e0       	ldi	r25, 0x00	; 0
 992:	02 2e       	mov	r0, r18
 994:	02 c0       	rjmp	.+4      	; 0x99a <LED_TOGGLE+0xcc>
 996:	88 0f       	add	r24, r24
 998:	99 1f       	adc	r25, r25
 99a:	0a 94       	dec	r0
 99c:	e2 f7       	brpl	.-8      	; 0x996 <LED_TOGGLE+0xc8>
 99e:	84 27       	eor	r24, r20
 9a0:	8c 93       	st	X, r24
 9a2:	13 c0       	rjmp	.+38     	; 0x9ca <LED_TOGGLE+0xfc>
		break ;
		case PORTD_ID :
		TOGGLE_BIT(PORTD , pin_num) ;
 9a4:	a2 e3       	ldi	r26, 0x32	; 50
 9a6:	b0 e0       	ldi	r27, 0x00	; 0
 9a8:	e2 e3       	ldi	r30, 0x32	; 50
 9aa:	f0 e0       	ldi	r31, 0x00	; 0
 9ac:	80 81       	ld	r24, Z
 9ae:	48 2f       	mov	r20, r24
 9b0:	89 81       	ldd	r24, Y+1	; 0x01
 9b2:	28 2f       	mov	r18, r24
 9b4:	30 e0       	ldi	r19, 0x00	; 0
 9b6:	81 e0       	ldi	r24, 0x01	; 1
 9b8:	90 e0       	ldi	r25, 0x00	; 0
 9ba:	02 2e       	mov	r0, r18
 9bc:	02 c0       	rjmp	.+4      	; 0x9c2 <LED_TOGGLE+0xf4>
 9be:	88 0f       	add	r24, r24
 9c0:	99 1f       	adc	r25, r25
 9c2:	0a 94       	dec	r0
 9c4:	e2 f7       	brpl	.-8      	; 0x9be <LED_TOGGLE+0xf0>
 9c6:	84 27       	eor	r24, r20
 9c8:	8c 93       	st	X, r24
		break ;

	}
	}

}
 9ca:	0f 90       	pop	r0
 9cc:	0f 90       	pop	r0
 9ce:	0f 90       	pop	r0
 9d0:	0f 90       	pop	r0
 9d2:	cf 91       	pop	r28
 9d4:	df 91       	pop	r29
 9d6:	08 95       	ret

000009d8 <__vector_1>:
#define NORMAL_RED_PIN   PIN2_ID
#define NORMAL_YELLOW_PIN   PIN1_ID
#define NORMAL_PORT       PORTA_ID

 ISR(INT0_vect)
{
 9d8:	1f 92       	push	r1
 9da:	0f 92       	push	r0
 9dc:	0f b6       	in	r0, 0x3f	; 63
 9de:	0f 92       	push	r0
 9e0:	11 24       	eor	r1, r1
 9e2:	2f 93       	push	r18
 9e4:	3f 93       	push	r19
 9e6:	4f 93       	push	r20
 9e8:	5f 93       	push	r21
 9ea:	6f 93       	push	r22
 9ec:	7f 93       	push	r23
 9ee:	8f 93       	push	r24
 9f0:	9f 93       	push	r25
 9f2:	af 93       	push	r26
 9f4:	bf 93       	push	r27
 9f6:	ef 93       	push	r30
 9f8:	ff 93       	push	r31
 9fa:	df 93       	push	r29
 9fc:	cf 93       	push	r28
 9fe:	cd b7       	in	r28, 0x3d	; 61
 a00:	de b7       	in	r29, 0x3e	; 62
	 Timer1_Delay_One_sec() ;
 a02:	0e 94 ca 00 	call	0x194	; 0x194 <Timer1_Delay_One_sec>
	 if(READ_PIN(PIN2_ID , PORTD_ID)==1) {
 a06:	82 e0       	ldi	r24, 0x02	; 2
 a08:	63 e0       	ldi	r22, 0x03	; 3
 a0a:	0e 94 c7 02 	call	0x58e	; 0x58e <READ_PIN>
 a0e:	81 30       	cpi	r24, 0x01	; 1
 a10:	11 f4       	brne	.+4      	; 0xa16 <__vector_1+0x3e>
		 cli() ;
 a12:	f8 94       	cli
 a14:	f7 c0       	rjmp	.+494    	; 0xc04 <__vector_1+0x22c>

	 }
	 else {
	if ((flag ==GREEN_CASE)||(flag ==YELLOW_CASE)||(flag ==TOGGLE_CASE)) {
 a16:	80 91 61 00 	lds	r24, 0x0061
 a1a:	81 30       	cpi	r24, 0x01	; 1
 a1c:	49 f0       	breq	.+18     	; 0xa30 <__vector_1+0x58>
 a1e:	80 91 61 00 	lds	r24, 0x0061
 a22:	82 30       	cpi	r24, 0x02	; 2
 a24:	29 f0       	breq	.+10     	; 0xa30 <__vector_1+0x58>
 a26:	80 91 61 00 	lds	r24, 0x0061
 a2a:	84 30       	cpi	r24, 0x04	; 4
 a2c:	09 f0       	breq	.+2      	; 0xa30 <__vector_1+0x58>
 a2e:	6f c0       	rjmp	.+222    	; 0xb0e <__vector_1+0x136>
     LED_OFF (PEDESTRIAN_RED_PIN , PEDESTRIAN_PORT) ;
 a30:	82 e0       	ldi	r24, 0x02	; 2
 a32:	61 e0       	ldi	r22, 0x01	; 1
 a34:	0e 94 45 04 	call	0x88a	; 0x88a <LED_OFF>
      LED_ON (PEDESTRIAN_RED_PIN , PEDESTRIAN_PORT) ;
 a38:	82 e0       	ldi	r24, 0x02	; 2
 a3a:	61 e0       	ldi	r22, 0x01	; 1
 a3c:	0e 94 56 04 	call	0x8ac	; 0x8ac <LED_ON>
      LED_ON(NORMAL_YELLOW_PIN ,NORMAL_PORT ) ;
 a40:	81 e0       	ldi	r24, 0x01	; 1
 a42:	60 e0       	ldi	r22, 0x00	; 0
 a44:	0e 94 56 04 	call	0x8ac	; 0x8ac <LED_ON>
      LED_ON(PEDESTRIAN_YELLOW_PIN ,PEDESTRIAN_PORT ) ;
 a48:	81 e0       	ldi	r24, 0x01	; 1
 a4a:	61 e0       	ldi	r22, 0x01	; 1
 a4c:	0e 94 56 04 	call	0x8ac	; 0x8ac <LED_ON>
      Timer1_Delay_One_sec() ;
 a50:	0e 94 ca 00 	call	0x194	; 0x194 <Timer1_Delay_One_sec>
      LED_ON (PEDESTRIAN_RED_PIN , PEDESTRIAN_PORT) ;
 a54:	82 e0       	ldi	r24, 0x02	; 2
 a56:	61 e0       	ldi	r22, 0x01	; 1
 a58:	0e 94 56 04 	call	0x8ac	; 0x8ac <LED_ON>
      LED_OFF(NORMAL_YELLOW_PIN ,NORMAL_PORT ) ;
 a5c:	81 e0       	ldi	r24, 0x01	; 1
 a5e:	60 e0       	ldi	r22, 0x00	; 0
 a60:	0e 94 45 04 	call	0x88a	; 0x88a <LED_OFF>
      LED_OFF(PEDESTRIAN_YELLOW_PIN ,PEDESTRIAN_PORT ) ;
 a64:	81 e0       	ldi	r24, 0x01	; 1
 a66:	61 e0       	ldi	r22, 0x01	; 1
 a68:	0e 94 45 04 	call	0x88a	; 0x88a <LED_OFF>
      Timer1_Delay_One_sec() ;
 a6c:	0e 94 ca 00 	call	0x194	; 0x194 <Timer1_Delay_One_sec>
      LED_ON (PEDESTRIAN_RED_PIN , PEDESTRIAN_PORT) ;
 a70:	82 e0       	ldi	r24, 0x02	; 2
 a72:	61 e0       	ldi	r22, 0x01	; 1
 a74:	0e 94 56 04 	call	0x8ac	; 0x8ac <LED_ON>
      LED_ON(NORMAL_YELLOW_PIN ,NORMAL_PORT ) ;
 a78:	81 e0       	ldi	r24, 0x01	; 1
 a7a:	60 e0       	ldi	r22, 0x00	; 0
 a7c:	0e 94 56 04 	call	0x8ac	; 0x8ac <LED_ON>
      LED_ON(PEDESTRIAN_YELLOW_PIN ,PEDESTRIAN_PORT ) ;
 a80:	81 e0       	ldi	r24, 0x01	; 1
 a82:	61 e0       	ldi	r22, 0x01	; 1
 a84:	0e 94 56 04 	call	0x8ac	; 0x8ac <LED_ON>
      Timer1_Delay_One_sec() ;
 a88:	0e 94 ca 00 	call	0x194	; 0x194 <Timer1_Delay_One_sec>
      LED_ON (PEDESTRIAN_RED_PIN , PEDESTRIAN_PORT) ;
 a8c:	82 e0       	ldi	r24, 0x02	; 2
 a8e:	61 e0       	ldi	r22, 0x01	; 1
 a90:	0e 94 56 04 	call	0x8ac	; 0x8ac <LED_ON>
      LED_OFF(NORMAL_YELLOW_PIN ,NORMAL_PORT ) ;
 a94:	81 e0       	ldi	r24, 0x01	; 1
 a96:	60 e0       	ldi	r22, 0x00	; 0
 a98:	0e 94 45 04 	call	0x88a	; 0x88a <LED_OFF>
      LED_OFF(PEDESTRIAN_YELLOW_PIN ,PEDESTRIAN_PORT ) ;
 a9c:	81 e0       	ldi	r24, 0x01	; 1
 a9e:	61 e0       	ldi	r22, 0x01	; 1
 aa0:	0e 94 45 04 	call	0x88a	; 0x88a <LED_OFF>
      Timer1_Delay_One_sec() ;
 aa4:	0e 94 ca 00 	call	0x194	; 0x194 <Timer1_Delay_One_sec>
      LED_ON (PEDESTRIAN_RED_PIN , PEDESTRIAN_PORT) ;
 aa8:	82 e0       	ldi	r24, 0x02	; 2
 aaa:	61 e0       	ldi	r22, 0x01	; 1
 aac:	0e 94 56 04 	call	0x8ac	; 0x8ac <LED_ON>
      LED_ON(NORMAL_YELLOW_PIN ,NORMAL_PORT ) ;
 ab0:	81 e0       	ldi	r24, 0x01	; 1
 ab2:	60 e0       	ldi	r22, 0x00	; 0
 ab4:	0e 94 56 04 	call	0x8ac	; 0x8ac <LED_ON>
      LED_ON(PEDESTRIAN_YELLOW_PIN ,PEDESTRIAN_PORT ) ;
 ab8:	81 e0       	ldi	r24, 0x01	; 1
 aba:	61 e0       	ldi	r22, 0x01	; 1
 abc:	0e 94 56 04 	call	0x8ac	; 0x8ac <LED_ON>
      Timer1_Delay_One_sec() ;
 ac0:	0e 94 ca 00 	call	0x194	; 0x194 <Timer1_Delay_One_sec>
      LED_OFF (PEDESTRIAN_RED_PIN , PEDESTRIAN_PORT) ;
 ac4:	82 e0       	ldi	r24, 0x02	; 2
 ac6:	61 e0       	ldi	r22, 0x01	; 1
 ac8:	0e 94 45 04 	call	0x88a	; 0x88a <LED_OFF>
      LED_OFF(NORMAL_YELLOW_PIN ,NORMAL_PORT ) ;
 acc:	81 e0       	ldi	r24, 0x01	; 1
 ace:	60 e0       	ldi	r22, 0x00	; 0
 ad0:	0e 94 45 04 	call	0x88a	; 0x88a <LED_OFF>
      LED_OFF(PEDESTRIAN_YELLOW_PIN ,PEDESTRIAN_PORT ) ;
 ad4:	81 e0       	ldi	r24, 0x01	; 1
 ad6:	61 e0       	ldi	r22, 0x01	; 1
 ad8:	0e 94 45 04 	call	0x88a	; 0x88a <LED_OFF>
      LED_OFF(NORMAL_GREEN_PIN , NORMAL_PORT) ;
 adc:	80 e0       	ldi	r24, 0x00	; 0
 ade:	60 e0       	ldi	r22, 0x00	; 0
 ae0:	0e 94 45 04 	call	0x88a	; 0x88a <LED_OFF>
      LED_ON(PEDESTRIAN_GREEN_PIN , PEDESTRIAN_PORT) ;
 ae4:	80 e0       	ldi	r24, 0x00	; 0
 ae6:	61 e0       	ldi	r22, 0x01	; 1
 ae8:	0e 94 56 04 	call	0x8ac	; 0x8ac <LED_ON>
      LED_ON(NORMAL_RED_PIN , NORMAL_PORT) ;
 aec:	82 e0       	ldi	r24, 0x02	; 2
 aee:	60 e0       	ldi	r22, 0x00	; 0
 af0:	0e 94 56 04 	call	0x8ac	; 0x8ac <LED_ON>
      Timer1_Delay_FIVE_sec() ;
 af4:	0e 94 a3 00 	call	0x146	; 0x146 <Timer1_Delay_FIVE_sec>
      LED_OFF(PEDESTRIAN_GREEN_PIN , PEDESTRIAN_PORT) ;
 af8:	80 e0       	ldi	r24, 0x00	; 0
 afa:	61 e0       	ldi	r22, 0x01	; 1
 afc:	0e 94 45 04 	call	0x88a	; 0x88a <LED_OFF>
      LED_ON (PEDESTRIAN_RED_PIN , PEDESTRIAN_PORT) ;
 b00:	82 e0       	ldi	r24, 0x02	; 2
 b02:	61 e0       	ldi	r22, 0x01	; 1
 b04:	0e 94 56 04 	call	0x8ac	; 0x8ac <LED_ON>
       gtick = 0 ;
 b08:	10 92 60 00 	sts	0x0060, r1
 b0c:	7b c0       	rjmp	.+246    	; 0xc04 <__vector_1+0x22c>
	}
	else if (flag ==RED_CASE) {
 b0e:	80 91 61 00 	lds	r24, 0x0061
 b12:	83 30       	cpi	r24, 0x03	; 3
 b14:	09 f0       	breq	.+2      	; 0xb18 <__vector_1+0x140>
 b16:	76 c0       	rjmp	.+236    	; 0xc04 <__vector_1+0x22c>
		LED_OFF (PEDESTRIAN_RED_PIN , PEDESTRIAN_PORT) ;
 b18:	82 e0       	ldi	r24, 0x02	; 2
 b1a:	61 e0       	ldi	r22, 0x01	; 1
 b1c:	0e 94 45 04 	call	0x88a	; 0x88a <LED_OFF>
		LED_ON(NORMAL_RED_PIN , NORMAL_PORT);
 b20:	82 e0       	ldi	r24, 0x02	; 2
 b22:	60 e0       	ldi	r22, 0x00	; 0
 b24:	0e 94 56 04 	call	0x8ac	; 0x8ac <LED_ON>
		LED_ON(PEDESTRIAN_GREEN_PIN , PEDESTRIAN_PORT) ;
 b28:	80 e0       	ldi	r24, 0x00	; 0
 b2a:	61 e0       	ldi	r22, 0x01	; 1
 b2c:	0e 94 56 04 	call	0x8ac	; 0x8ac <LED_ON>
		Timer1_Delay_FIVE_sec() ;
 b30:	0e 94 a3 00 	call	0x146	; 0x146 <Timer1_Delay_FIVE_sec>
		LED_ON(PEDESTRIAN_GREEN_PIN , PEDESTRIAN_PORT) ;
 b34:	80 e0       	ldi	r24, 0x00	; 0
 b36:	61 e0       	ldi	r22, 0x01	; 1
 b38:	0e 94 56 04 	call	0x8ac	; 0x8ac <LED_ON>
		LED_ON(NORMAL_YELLOW_PIN ,NORMAL_PORT ) ;
 b3c:	81 e0       	ldi	r24, 0x01	; 1
 b3e:	60 e0       	ldi	r22, 0x00	; 0
 b40:	0e 94 56 04 	call	0x8ac	; 0x8ac <LED_ON>
		LED_ON(PEDESTRIAN_YELLOW_PIN ,PEDESTRIAN_PORT ) ;
 b44:	81 e0       	ldi	r24, 0x01	; 1
 b46:	61 e0       	ldi	r22, 0x01	; 1
 b48:	0e 94 56 04 	call	0x8ac	; 0x8ac <LED_ON>
		LED_OFF(NORMAL_RED_PIN , NORMAL_PORT) ;
 b4c:	82 e0       	ldi	r24, 0x02	; 2
 b4e:	60 e0       	ldi	r22, 0x00	; 0
 b50:	0e 94 45 04 	call	0x88a	; 0x88a <LED_OFF>
		Timer1_Delay_One_sec() ;
 b54:	0e 94 ca 00 	call	0x194	; 0x194 <Timer1_Delay_One_sec>
		LED_ON(PEDESTRIAN_GREEN_PIN , PEDESTRIAN_PORT) ;
 b58:	80 e0       	ldi	r24, 0x00	; 0
 b5a:	61 e0       	ldi	r22, 0x01	; 1
 b5c:	0e 94 56 04 	call	0x8ac	; 0x8ac <LED_ON>
		LED_OFF(NORMAL_YELLOW_PIN ,NORMAL_PORT ) ;
 b60:	81 e0       	ldi	r24, 0x01	; 1
 b62:	60 e0       	ldi	r22, 0x00	; 0
 b64:	0e 94 45 04 	call	0x88a	; 0x88a <LED_OFF>
		LED_OFF(PEDESTRIAN_YELLOW_PIN ,PEDESTRIAN_PORT ) ;
 b68:	81 e0       	ldi	r24, 0x01	; 1
 b6a:	61 e0       	ldi	r22, 0x01	; 1
 b6c:	0e 94 45 04 	call	0x88a	; 0x88a <LED_OFF>
	    LED_OFF(NORMAL_RED_PIN , NORMAL_PORT) ;
 b70:	82 e0       	ldi	r24, 0x02	; 2
 b72:	60 e0       	ldi	r22, 0x00	; 0
 b74:	0e 94 45 04 	call	0x88a	; 0x88a <LED_OFF>
	    Timer1_Delay_One_sec() ;
 b78:	0e 94 ca 00 	call	0x194	; 0x194 <Timer1_Delay_One_sec>
	    LED_ON(PEDESTRIAN_GREEN_PIN , PEDESTRIAN_PORT) ;
 b7c:	80 e0       	ldi	r24, 0x00	; 0
 b7e:	61 e0       	ldi	r22, 0x01	; 1
 b80:	0e 94 56 04 	call	0x8ac	; 0x8ac <LED_ON>
	    LED_ON(NORMAL_YELLOW_PIN ,NORMAL_PORT ) ;
 b84:	81 e0       	ldi	r24, 0x01	; 1
 b86:	60 e0       	ldi	r22, 0x00	; 0
 b88:	0e 94 56 04 	call	0x8ac	; 0x8ac <LED_ON>
	   LED_ON(PEDESTRIAN_YELLOW_PIN ,PEDESTRIAN_PORT ) ;
 b8c:	81 e0       	ldi	r24, 0x01	; 1
 b8e:	61 e0       	ldi	r22, 0x01	; 1
 b90:	0e 94 56 04 	call	0x8ac	; 0x8ac <LED_ON>
 	   LED_OFF(NORMAL_RED_PIN , NORMAL_PORT) ;
 b94:	82 e0       	ldi	r24, 0x02	; 2
 b96:	60 e0       	ldi	r22, 0x00	; 0
 b98:	0e 94 45 04 	call	0x88a	; 0x88a <LED_OFF>
	   Timer1_Delay_One_sec() ;
 b9c:	0e 94 ca 00 	call	0x194	; 0x194 <Timer1_Delay_One_sec>
	    LED_ON(PEDESTRIAN_GREEN_PIN , PEDESTRIAN_PORT) ;
 ba0:	80 e0       	ldi	r24, 0x00	; 0
 ba2:	61 e0       	ldi	r22, 0x01	; 1
 ba4:	0e 94 56 04 	call	0x8ac	; 0x8ac <LED_ON>
	   LED_OFF(NORMAL_YELLOW_PIN ,NORMAL_PORT ) ;
 ba8:	81 e0       	ldi	r24, 0x01	; 1
 baa:	60 e0       	ldi	r22, 0x00	; 0
 bac:	0e 94 45 04 	call	0x88a	; 0x88a <LED_OFF>
		LED_OFF(PEDESTRIAN_YELLOW_PIN ,PEDESTRIAN_PORT ) ;
 bb0:	81 e0       	ldi	r24, 0x01	; 1
 bb2:	61 e0       	ldi	r22, 0x01	; 1
 bb4:	0e 94 45 04 	call	0x88a	; 0x88a <LED_OFF>
		LED_OFF(NORMAL_RED_PIN , NORMAL_PORT) ;
 bb8:	82 e0       	ldi	r24, 0x02	; 2
 bba:	60 e0       	ldi	r22, 0x00	; 0
 bbc:	0e 94 45 04 	call	0x88a	; 0x88a <LED_OFF>
		Timer1_Delay_One_sec() ;
 bc0:	0e 94 ca 00 	call	0x194	; 0x194 <Timer1_Delay_One_sec>
		LED_ON(PEDESTRIAN_GREEN_PIN , PEDESTRIAN_PORT) ;
 bc4:	80 e0       	ldi	r24, 0x00	; 0
 bc6:	61 e0       	ldi	r22, 0x01	; 1
 bc8:	0e 94 56 04 	call	0x8ac	; 0x8ac <LED_ON>
		LED_ON(NORMAL_YELLOW_PIN ,NORMAL_PORT ) ;
 bcc:	81 e0       	ldi	r24, 0x01	; 1
 bce:	60 e0       	ldi	r22, 0x00	; 0
 bd0:	0e 94 56 04 	call	0x8ac	; 0x8ac <LED_ON>
		LED_ON(PEDESTRIAN_YELLOW_PIN ,PEDESTRIAN_PORT ) ;
 bd4:	81 e0       	ldi	r24, 0x01	; 1
 bd6:	61 e0       	ldi	r22, 0x01	; 1
 bd8:	0e 94 56 04 	call	0x8ac	; 0x8ac <LED_ON>
		LED_OFF(NORMAL_RED_PIN , NORMAL_PORT) ;
 bdc:	82 e0       	ldi	r24, 0x02	; 2
 bde:	60 e0       	ldi	r22, 0x00	; 0
 be0:	0e 94 45 04 	call	0x88a	; 0x88a <LED_OFF>
		Timer1_Delay_One_sec() ;
 be4:	0e 94 ca 00 	call	0x194	; 0x194 <Timer1_Delay_One_sec>
		LED_OFF(PEDESTRIAN_GREEN_PIN , PEDESTRIAN_PORT) ;
 be8:	80 e0       	ldi	r24, 0x00	; 0
 bea:	61 e0       	ldi	r22, 0x01	; 1
 bec:	0e 94 45 04 	call	0x88a	; 0x88a <LED_OFF>
		LED_OFF(PEDESTRIAN_YELLOW_PIN ,PEDESTRIAN_PORT ) ;
 bf0:	81 e0       	ldi	r24, 0x01	; 1
 bf2:	61 e0       	ldi	r22, 0x01	; 1
 bf4:	0e 94 45 04 	call	0x88a	; 0x88a <LED_OFF>
		LED_ON (PEDESTRIAN_RED_PIN , PEDESTRIAN_PORT) ;
 bf8:	82 e0       	ldi	r24, 0x02	; 2
 bfa:	61 e0       	ldi	r22, 0x01	; 1
 bfc:	0e 94 56 04 	call	0x8ac	; 0x8ac <LED_ON>
		 gtick = 0 ;
 c00:	10 92 60 00 	sts	0x0060, r1

	}

}
}
 c04:	cf 91       	pop	r28
 c06:	df 91       	pop	r29
 c08:	ff 91       	pop	r31
 c0a:	ef 91       	pop	r30
 c0c:	bf 91       	pop	r27
 c0e:	af 91       	pop	r26
 c10:	9f 91       	pop	r25
 c12:	8f 91       	pop	r24
 c14:	7f 91       	pop	r23
 c16:	6f 91       	pop	r22
 c18:	5f 91       	pop	r21
 c1a:	4f 91       	pop	r20
 c1c:	3f 91       	pop	r19
 c1e:	2f 91       	pop	r18
 c20:	0f 90       	pop	r0
 c22:	0f be       	out	0x3f, r0	; 63
 c24:	0f 90       	pop	r0
 c26:	1f 90       	pop	r1
 c28:	18 95       	reti

00000c2a <BUTTON_Interupt>:
 void BUTTON_Interupt () {
 c2a:	df 93       	push	r29
 c2c:	cf 93       	push	r28
 c2e:	cd b7       	in	r28, 0x3d	; 61
 c30:	de b7       	in	r29, 0x3e	; 62
	PIN_DIRECTION(PIN2_ID , PORTB_ID , PIN_INPUT) ;
 c32:	82 e0       	ldi	r24, 0x02	; 2
 c34:	61 e0       	ldi	r22, 0x01	; 1
 c36:	40 e0       	ldi	r20, 0x00	; 0
 c38:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <PIN_DIRECTION>
	SET_BIT (GICR , INT0) ;
 c3c:	ab e5       	ldi	r26, 0x5B	; 91
 c3e:	b0 e0       	ldi	r27, 0x00	; 0
 c40:	eb e5       	ldi	r30, 0x5B	; 91
 c42:	f0 e0       	ldi	r31, 0x00	; 0
 c44:	80 81       	ld	r24, Z
 c46:	80 64       	ori	r24, 0x40	; 64
 c48:	8c 93       	st	X, r24
	MCUCR |= (1<<ISC00) | (1<<ISC01);   // Trigger INT0 with the raising edge
 c4a:	a5 e5       	ldi	r26, 0x55	; 85
 c4c:	b0 e0       	ldi	r27, 0x00	; 0
 c4e:	e5 e5       	ldi	r30, 0x55	; 85
 c50:	f0 e0       	ldi	r31, 0x00	; 0
 c52:	80 81       	ld	r24, Z
 c54:	83 60       	ori	r24, 0x03	; 3
 c56:	8c 93       	st	X, r24
	sei() ;
 c58:	78 94       	sei

}
 c5a:	cf 91       	pop	r28
 c5c:	df 91       	pop	r29
 c5e:	08 95       	ret

00000c60 <App_Start>:
#define GREEN_CASE 1
#define YELLOW_CASE 2
#define RED_CASE 3
#define TOGGLE_CASE 4
uint8 flag = 0 ;
void App_Start () {
 c60:	df 93       	push	r29
 c62:	cf 93       	push	r28
 c64:	cd b7       	in	r28, 0x3d	; 61
 c66:	de b7       	in	r29, 0x3e	; 62
	if(gtick == 0 ) {
 c68:	80 91 60 00 	lds	r24, 0x0060
 c6c:	88 23       	and	r24, r24
 c6e:	81 f4       	brne	.+32     	; 0xc90 <App_Start+0x30>
			LED_OFF(NORMAL_RED_PIN,NORMAL_PORT ) ;
 c70:	82 e0       	ldi	r24, 0x02	; 2
 c72:	60 e0       	ldi	r22, 0x00	; 0
 c74:	0e 94 45 04 	call	0x88a	; 0x88a <LED_OFF>
			LED_OFF(NORMAL_YELLOW_PIN,NORMAL_PORT ) ;
 c78:	81 e0       	ldi	r24, 0x01	; 1
 c7a:	60 e0       	ldi	r22, 0x00	; 0
 c7c:	0e 94 45 04 	call	0x88a	; 0x88a <LED_OFF>
			LED_ON(NORMAL_GREEN_PIN ,NORMAL_PORT ) ;
 c80:	80 e0       	ldi	r24, 0x00	; 0
 c82:	60 e0       	ldi	r22, 0x00	; 0
 c84:	0e 94 56 04 	call	0x8ac	; 0x8ac <LED_ON>
			flag = GREEN_CASE ;
 c88:	81 e0       	ldi	r24, 0x01	; 1
 c8a:	80 93 61 00 	sts	0x0061, r24
 c8e:	d6 c0       	rjmp	.+428    	; 0xe3c <App_Start+0x1dc>
			}
			else if(gtick == (5*NUMBER_OF_TICKS_FOR_SECOND)) {
 c90:	80 91 60 00 	lds	r24, 0x0060
 c94:	84 31       	cpi	r24, 0x14	; 20
 c96:	81 f4       	brne	.+32     	; 0xcb8 <App_Start+0x58>
		     LED_OFF(NORMAL_GREEN_PIN ,NORMAL_PORT ) ;
 c98:	80 e0       	ldi	r24, 0x00	; 0
 c9a:	60 e0       	ldi	r22, 0x00	; 0
 c9c:	0e 94 45 04 	call	0x88a	; 0x88a <LED_OFF>
		     LED_OFF(NORMAL_RED_PIN,NORMAL_PORT ) ;
 ca0:	82 e0       	ldi	r24, 0x02	; 2
 ca2:	60 e0       	ldi	r22, 0x00	; 0
 ca4:	0e 94 45 04 	call	0x88a	; 0x88a <LED_OFF>
		      LED_ON(NORMAL_YELLOW_PIN ,NORMAL_PORT ) ;
 ca8:	81 e0       	ldi	r24, 0x01	; 1
 caa:	60 e0       	ldi	r22, 0x00	; 0
 cac:	0e 94 56 04 	call	0x8ac	; 0x8ac <LED_ON>
		      flag = YELLOW_CASE ;
 cb0:	82 e0       	ldi	r24, 0x02	; 2
 cb2:	80 93 61 00 	sts	0x0061, r24
 cb6:	c2 c0       	rjmp	.+388    	; 0xe3c <App_Start+0x1dc>

			}
			else if (gtick == (10*NUMBER_OF_TICKS_FOR_SECOND)) {
 cb8:	80 91 60 00 	lds	r24, 0x0060
 cbc:	88 32       	cpi	r24, 0x28	; 40
 cbe:	81 f4       	brne	.+32     	; 0xce0 <App_Start+0x80>
		    LED_OFF(NORMAL_GREEN_PIN ,NORMAL_PORT ) ;
 cc0:	80 e0       	ldi	r24, 0x00	; 0
 cc2:	60 e0       	ldi	r22, 0x00	; 0
 cc4:	0e 94 45 04 	call	0x88a	; 0x88a <LED_OFF>
		    LED_OFF(NORMAL_RED_PIN,NORMAL_PORT ) ;
 cc8:	82 e0       	ldi	r24, 0x02	; 2
 cca:	60 e0       	ldi	r22, 0x00	; 0
 ccc:	0e 94 45 04 	call	0x88a	; 0x88a <LED_OFF>
		    LED_TOGGLE(NORMAL_YELLOW_PIN ,NORMAL_PORT ) ;
 cd0:	81 e0       	ldi	r24, 0x01	; 1
 cd2:	60 e0       	ldi	r22, 0x00	; 0
 cd4:	0e 94 67 04 	call	0x8ce	; 0x8ce <LED_TOGGLE>
		    flag =  TOGGLE_CASE ;
 cd8:	84 e0       	ldi	r24, 0x04	; 4
 cda:	80 93 61 00 	sts	0x0061, r24
 cde:	ae c0       	rjmp	.+348    	; 0xe3c <App_Start+0x1dc>
			}
		    else if (gtick == (11*NUMBER_OF_TICKS_FOR_SECOND)){
 ce0:	80 91 60 00 	lds	r24, 0x0060
 ce4:	8c 32       	cpi	r24, 0x2C	; 44
 ce6:	41 f4       	brne	.+16     	; 0xcf8 <App_Start+0x98>
		    	LED_TOGGLE(NORMAL_YELLOW_PIN ,NORMAL_PORT ) ;
 ce8:	81 e0       	ldi	r24, 0x01	; 1
 cea:	60 e0       	ldi	r22, 0x00	; 0
 cec:	0e 94 67 04 	call	0x8ce	; 0x8ce <LED_TOGGLE>
		    	flag =  TOGGLE_CASE ;
 cf0:	84 e0       	ldi	r24, 0x04	; 4
 cf2:	80 93 61 00 	sts	0x0061, r24
 cf6:	a2 c0       	rjmp	.+324    	; 0xe3c <App_Start+0x1dc>
		    }
		    else if (gtick == (12*NUMBER_OF_TICKS_FOR_SECOND)){
 cf8:	80 91 60 00 	lds	r24, 0x0060
 cfc:	80 33       	cpi	r24, 0x30	; 48
 cfe:	41 f4       	brne	.+16     	; 0xd10 <App_Start+0xb0>
		    	LED_TOGGLE(NORMAL_YELLOW_PIN ,NORMAL_PORT ) ;
 d00:	81 e0       	ldi	r24, 0x01	; 1
 d02:	60 e0       	ldi	r22, 0x00	; 0
 d04:	0e 94 67 04 	call	0x8ce	; 0x8ce <LED_TOGGLE>
		    	flag =  TOGGLE_CASE ;
 d08:	84 e0       	ldi	r24, 0x04	; 4
 d0a:	80 93 61 00 	sts	0x0061, r24
 d0e:	96 c0       	rjmp	.+300    	; 0xe3c <App_Start+0x1dc>
		    }
		    else if (gtick == (13*NUMBER_OF_TICKS_FOR_SECOND)){
 d10:	80 91 60 00 	lds	r24, 0x0060
 d14:	84 33       	cpi	r24, 0x34	; 52
 d16:	41 f4       	brne	.+16     	; 0xd28 <App_Start+0xc8>
		    	LED_TOGGLE(NORMAL_YELLOW_PIN ,NORMAL_PORT ) ;
 d18:	81 e0       	ldi	r24, 0x01	; 1
 d1a:	60 e0       	ldi	r22, 0x00	; 0
 d1c:	0e 94 67 04 	call	0x8ce	; 0x8ce <LED_TOGGLE>
		    	flag =  TOGGLE_CASE ;
 d20:	84 e0       	ldi	r24, 0x04	; 4
 d22:	80 93 61 00 	sts	0x0061, r24
 d26:	8a c0       	rjmp	.+276    	; 0xe3c <App_Start+0x1dc>
		    }
		    else if(gtick == (14*NUMBER_OF_TICKS_FOR_SECOND)){
 d28:	80 91 60 00 	lds	r24, 0x0060
 d2c:	88 33       	cpi	r24, 0x38	; 56
 d2e:	41 f4       	brne	.+16     	; 0xd40 <App_Start+0xe0>
		    	LED_TOGGLE(NORMAL_YELLOW_PIN ,NORMAL_PORT ) ;
 d30:	81 e0       	ldi	r24, 0x01	; 1
 d32:	60 e0       	ldi	r22, 0x00	; 0
 d34:	0e 94 67 04 	call	0x8ce	; 0x8ce <LED_TOGGLE>
		    	flag =  TOGGLE_CASE ;
 d38:	84 e0       	ldi	r24, 0x04	; 4
 d3a:	80 93 61 00 	sts	0x0061, r24
 d3e:	7e c0       	rjmp	.+252    	; 0xe3c <App_Start+0x1dc>

		    }
			else if (gtick == (15*NUMBER_OF_TICKS_FOR_SECOND))  {
 d40:	80 91 60 00 	lds	r24, 0x0060
 d44:	8c 33       	cpi	r24, 0x3C	; 60
 d46:	81 f4       	brne	.+32     	; 0xd68 <App_Start+0x108>
				LED_OFF(NORMAL_YELLOW_PIN,NORMAL_PORT ) ;
 d48:	81 e0       	ldi	r24, 0x01	; 1
 d4a:	60 e0       	ldi	r22, 0x00	; 0
 d4c:	0e 94 45 04 	call	0x88a	; 0x88a <LED_OFF>
				 LED_OFF(NORMAL_GREEN_PIN ,NORMAL_PORT ) ;
 d50:	80 e0       	ldi	r24, 0x00	; 0
 d52:	60 e0       	ldi	r22, 0x00	; 0
 d54:	0e 94 45 04 	call	0x88a	; 0x88a <LED_OFF>
				LED_ON(NORMAL_RED_PIN  ,NORMAL_PORT ) ;
 d58:	82 e0       	ldi	r24, 0x02	; 2
 d5a:	60 e0       	ldi	r22, 0x00	; 0
 d5c:	0e 94 56 04 	call	0x8ac	; 0x8ac <LED_ON>
				flag = RED_CASE ;
 d60:	83 e0       	ldi	r24, 0x03	; 3
 d62:	80 93 61 00 	sts	0x0061, r24
 d66:	6a c0       	rjmp	.+212    	; 0xe3c <App_Start+0x1dc>
			}
			else if (gtick == (20*NUMBER_OF_TICKS_FOR_SECOND)) {
 d68:	80 91 60 00 	lds	r24, 0x0060
 d6c:	80 35       	cpi	r24, 0x50	; 80
 d6e:	81 f4       	brne	.+32     	; 0xd90 <App_Start+0x130>
				LED_OFF(NORMAL_RED_PIN,NORMAL_PORT ) ;
 d70:	82 e0       	ldi	r24, 0x02	; 2
 d72:	60 e0       	ldi	r22, 0x00	; 0
 d74:	0e 94 45 04 	call	0x88a	; 0x88a <LED_OFF>
				LED_OFF(NORMAL_GREEN_PIN ,NORMAL_PORT ) ;
 d78:	80 e0       	ldi	r24, 0x00	; 0
 d7a:	60 e0       	ldi	r22, 0x00	; 0
 d7c:	0e 94 45 04 	call	0x88a	; 0x88a <LED_OFF>
				LED_ON(NORMAL_YELLOW_PIN ,NORMAL_PORT ) ;
 d80:	81 e0       	ldi	r24, 0x01	; 1
 d82:	60 e0       	ldi	r22, 0x00	; 0
 d84:	0e 94 56 04 	call	0x8ac	; 0x8ac <LED_ON>
				 flag = YELLOW_CASE ;
 d88:	82 e0       	ldi	r24, 0x02	; 2
 d8a:	80 93 61 00 	sts	0x0061, r24
 d8e:	56 c0       	rjmp	.+172    	; 0xe3c <App_Start+0x1dc>


			}
			else if (gtick == (25*NUMBER_OF_TICKS_FOR_SECOND))  {
 d90:	80 91 60 00 	lds	r24, 0x0060
 d94:	84 36       	cpi	r24, 0x64	; 100
 d96:	81 f4       	brne	.+32     	; 0xdb8 <App_Start+0x158>
					 LED_OFF(NORMAL_GREEN_PIN ,NORMAL_PORT ) ;
 d98:	80 e0       	ldi	r24, 0x00	; 0
 d9a:	60 e0       	ldi	r22, 0x00	; 0
 d9c:	0e 94 45 04 	call	0x88a	; 0x88a <LED_OFF>
					 LED_OFF(NORMAL_RED_PIN,NORMAL_PORT ) ;
 da0:	82 e0       	ldi	r24, 0x02	; 2
 da2:	60 e0       	ldi	r22, 0x00	; 0
 da4:	0e 94 45 04 	call	0x88a	; 0x88a <LED_OFF>
					 LED_TOGGLE(NORMAL_YELLOW_PIN ,NORMAL_PORT ) ;
 da8:	81 e0       	ldi	r24, 0x01	; 1
 daa:	60 e0       	ldi	r22, 0x00	; 0
 dac:	0e 94 67 04 	call	0x8ce	; 0x8ce <LED_TOGGLE>
					 flag =  TOGGLE_CASE ;
 db0:	84 e0       	ldi	r24, 0x04	; 4
 db2:	80 93 61 00 	sts	0x0061, r24
 db6:	42 c0       	rjmp	.+132    	; 0xe3c <App_Start+0x1dc>
			}
		  else if (gtick == (26*NUMBER_OF_TICKS_FOR_SECOND)){
 db8:	80 91 60 00 	lds	r24, 0x0060
 dbc:	88 36       	cpi	r24, 0x68	; 104
 dbe:	41 f4       	brne	.+16     	; 0xdd0 <App_Start+0x170>
				    	LED_TOGGLE(NORMAL_YELLOW_PIN ,NORMAL_PORT ) ;
 dc0:	81 e0       	ldi	r24, 0x01	; 1
 dc2:	60 e0       	ldi	r22, 0x00	; 0
 dc4:	0e 94 67 04 	call	0x8ce	; 0x8ce <LED_TOGGLE>
				    	flag =  TOGGLE_CASE ;
 dc8:	84 e0       	ldi	r24, 0x04	; 4
 dca:	80 93 61 00 	sts	0x0061, r24
 dce:	36 c0       	rjmp	.+108    	; 0xe3c <App_Start+0x1dc>
				    }
		 else if (gtick == (27*NUMBER_OF_TICKS_FOR_SECOND)){
 dd0:	80 91 60 00 	lds	r24, 0x0060
 dd4:	8c 36       	cpi	r24, 0x6C	; 108
 dd6:	41 f4       	brne	.+16     	; 0xde8 <App_Start+0x188>
				    	LED_TOGGLE(NORMAL_YELLOW_PIN ,NORMAL_PORT ) ;
 dd8:	81 e0       	ldi	r24, 0x01	; 1
 dda:	60 e0       	ldi	r22, 0x00	; 0
 ddc:	0e 94 67 04 	call	0x8ce	; 0x8ce <LED_TOGGLE>
				    	flag =  TOGGLE_CASE ;
 de0:	84 e0       	ldi	r24, 0x04	; 4
 de2:	80 93 61 00 	sts	0x0061, r24
 de6:	2a c0       	rjmp	.+84     	; 0xe3c <App_Start+0x1dc>
				    }
	    else if(gtick == (28*NUMBER_OF_TICKS_FOR_SECOND)){
 de8:	80 91 60 00 	lds	r24, 0x0060
 dec:	80 37       	cpi	r24, 0x70	; 112
 dee:	41 f4       	brne	.+16     	; 0xe00 <App_Start+0x1a0>
				    	LED_TOGGLE(NORMAL_YELLOW_PIN ,NORMAL_PORT ) ;
 df0:	81 e0       	ldi	r24, 0x01	; 1
 df2:	60 e0       	ldi	r22, 0x00	; 0
 df4:	0e 94 67 04 	call	0x8ce	; 0x8ce <LED_TOGGLE>
				    	flag =  TOGGLE_CASE ;
 df8:	84 e0       	ldi	r24, 0x04	; 4
 dfa:	80 93 61 00 	sts	0x0061, r24
 dfe:	1e c0       	rjmp	.+60     	; 0xe3c <App_Start+0x1dc>

				    }
				    else if(gtick == (29*NUMBER_OF_TICKS_FOR_SECOND)){
 e00:	80 91 60 00 	lds	r24, 0x0060
 e04:	84 37       	cpi	r24, 0x74	; 116
 e06:	41 f4       	brne	.+16     	; 0xe18 <App_Start+0x1b8>
				    	LED_TOGGLE(NORMAL_YELLOW_PIN ,NORMAL_PORT ) ;
 e08:	81 e0       	ldi	r24, 0x01	; 1
 e0a:	60 e0       	ldi	r22, 0x00	; 0
 e0c:	0e 94 67 04 	call	0x8ce	; 0x8ce <LED_TOGGLE>
				    	flag =  TOGGLE_CASE ;
 e10:	84 e0       	ldi	r24, 0x04	; 4
 e12:	80 93 61 00 	sts	0x0061, r24
 e16:	12 c0       	rjmp	.+36     	; 0xe3c <App_Start+0x1dc>

				    }
				    else if (gtick == (30*NUMBER_OF_TICKS_FOR_SECOND)) {
 e18:	80 91 60 00 	lds	r24, 0x0060
 e1c:	88 37       	cpi	r24, 0x78	; 120
 e1e:	71 f4       	brne	.+28     	; 0xe3c <App_Start+0x1dc>
				    	LED_OFF(NORMAL_RED_PIN,NORMAL_PORT ) ;
 e20:	82 e0       	ldi	r24, 0x02	; 2
 e22:	60 e0       	ldi	r22, 0x00	; 0
 e24:	0e 94 45 04 	call	0x88a	; 0x88a <LED_OFF>
				    	LED_OFF(NORMAL_GREEN_PIN ,NORMAL_PORT ) ;
 e28:	80 e0       	ldi	r24, 0x00	; 0
 e2a:	60 e0       	ldi	r22, 0x00	; 0
 e2c:	0e 94 45 04 	call	0x88a	; 0x88a <LED_OFF>
				    	LED_OFF(NORMAL_YELLOW_PIN,NORMAL_PORT ) ;
 e30:	81 e0       	ldi	r24, 0x01	; 1
 e32:	60 e0       	ldi	r22, 0x00	; 0
 e34:	0e 94 45 04 	call	0x88a	; 0x88a <LED_OFF>
				    	gtick = 0  ;
 e38:	10 92 60 00 	sts	0x0060, r1
				    }




}
 e3c:	cf 91       	pop	r28
 e3e:	df 91       	pop	r29
 e40:	08 95       	ret

00000e42 <App_Init>:
void App_Init () {
 e42:	df 93       	push	r29
 e44:	cf 93       	push	r28
 e46:	cd b7       	in	r28, 0x3d	; 61
 e48:	de b7       	in	r29, 0x3e	; 62
	   TIMER0_INIT() ;
 e4a:	0e 94 71 00 	call	0xe2	; 0xe2 <TIMER0_INIT>
		LED_INIT(NORMAL_GREEN_PIN , NORMAL_PORT  ) ;
 e4e:	80 e0       	ldi	r24, 0x00	; 0
 e50:	60 e0       	ldi	r22, 0x00	; 0
 e52:	0e 94 2f 04 	call	0x85e	; 0x85e <LED_INIT>
		LED_INIT(NORMAL_YELLOW_PIN , NORMAL_PORT  ) ;
 e56:	81 e0       	ldi	r24, 0x01	; 1
 e58:	60 e0       	ldi	r22, 0x00	; 0
 e5a:	0e 94 2f 04 	call	0x85e	; 0x85e <LED_INIT>
		LED_INIT(NORMAL_RED_PIN   , NORMAL_PORT  ) ;
 e5e:	82 e0       	ldi	r24, 0x02	; 2
 e60:	60 e0       	ldi	r22, 0x00	; 0
 e62:	0e 94 2f 04 	call	0x85e	; 0x85e <LED_INIT>
		LED_INIT(PEDESTRIAN_GREEN_PIN , PEDESTRIAN_PORT)  ;
 e66:	80 e0       	ldi	r24, 0x00	; 0
 e68:	61 e0       	ldi	r22, 0x01	; 1
 e6a:	0e 94 2f 04 	call	0x85e	; 0x85e <LED_INIT>
		LED_INIT(PEDESTRIAN_RED_PIN , PEDESTRIAN_PORT)  ;
 e6e:	82 e0       	ldi	r24, 0x02	; 2
 e70:	61 e0       	ldi	r22, 0x01	; 1
 e72:	0e 94 2f 04 	call	0x85e	; 0x85e <LED_INIT>
		LED_INIT(PEDESTRIAN_YELLOW_PIN , PEDESTRIAN_PORT)  ;
 e76:	81 e0       	ldi	r24, 0x01	; 1
 e78:	61 e0       	ldi	r22, 0x01	; 1
 e7a:	0e 94 2f 04 	call	0x85e	; 0x85e <LED_INIT>
		BUTTON_Interupt ()  ;
 e7e:	0e 94 15 06 	call	0xc2a	; 0xc2a <BUTTON_Interupt>
}
 e82:	cf 91       	pop	r28
 e84:	df 91       	pop	r29
 e86:	08 95       	ret

00000e88 <main>:
 */

#include "Application/App.h"

int main(void)
{
 e88:	df 93       	push	r29
 e8a:	cf 93       	push	r28
 e8c:	cd b7       	in	r28, 0x3d	; 61
 e8e:	de b7       	in	r29, 0x3e	; 62
	App_Init ()  ;
 e90:	0e 94 21 07 	call	0xe42	; 0xe42 <App_Init>
    while (1)
    {
    App_Start () ;
 e94:	0e 94 30 06 	call	0xc60	; 0xc60 <App_Start>
 e98:	fd cf       	rjmp	.-6      	; 0xe94 <main+0xc>

00000e9a <_exit>:
 e9a:	f8 94       	cli

00000e9c <__stop_program>:
 e9c:	ff cf       	rjmp	.-2      	; 0xe9c <__stop_program>
